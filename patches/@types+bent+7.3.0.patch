diff --git a/node_modules/@types/bent/index.d.ts b/node_modules/@types/bent/index.d.ts
index 2845215..adeb6b0 100644
--- a/node_modules/@types/bent/index.d.ts
+++ b/node_modules/@types/bent/index.d.ts
@@ -1,37 +1,47 @@
-// Type definitions for bent 7.3
+// Type definitions for bent 7.3.2
 // Project: https://github.com/mikeal/bent#readme
-// Definitions by: Ovyerus <https://github.com/Ovyerus>
-// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
-// TypeScript Version: 3.0
+// Definitions by: sounisi5011 <https://github.com/sounisi5011>
 
 /// <reference types="node" />
-/// <reference lib="dom" />
 
+import { IncomingMessage, RequestOptions } from 'http';
 import { PassThrough, Stream } from 'stream';
 
 type HttpMethod = 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
 type StatusCode = number;
 type BaseUrl = string;
-interface Headers {
-    [key: string]: any;
-}
+type Headers = NonNullable<RequestOptions['headers']>;
 
 // Type first
 declare function bent(type: 'string', ...args: bent.Options[]): bent.RequestFunction<string>;
 declare function bent(type: 'buffer', ...args: bent.Options[]): bent.RequestFunction<Buffer | ArrayBuffer>;
 declare function bent(type: 'json', ...args: bent.Options[]): bent.RequestFunction<bent.Json>;
 
-// Method or url first
-declare function bent(baseUrl: string, type: 'string', ...args: bent.Options[]): bent.RequestFunction<string>;
+// Type second
+declare function bent(arg1: bent.Options, type: 'string', ...args: bent.Options[]): bent.RequestFunction<string>;
 declare function bent(
-    baseUrl: string,
+    arg1: bent.Options,
     type: 'buffer',
     ...args: bent.Options[]
 ): bent.RequestFunction<Buffer | ArrayBuffer>;
-declare function bent(baseUrl: string, type: 'json', ...args: bent.Options[]): bent.RequestFunction<bent.Json>;
-declare function bent(baseUrl: string, ...args: bent.Options[]): bent.RequestFunction<bent.ValidResponse>;
+declare function bent(arg1: bent.Options, type: 'json', ...args: bent.Options[]): bent.RequestFunction<bent.Json>;
+
+// Type third
+declare function bent(arg1: bent.Options, arg2: bent.Options, type: 'string', ...args: bent.Options[]): bent.RequestFunction<string>;
+declare function bent(arg1: bent.Options, arg2: bent.Options, type: 'buffer', ...args: bent.Options[]): bent.RequestFunction<Buffer | ArrayBuffer>;
+declare function bent(arg1: bent.Options, arg2: bent.Options, type: 'json', ...args: bent.Options[]): bent.RequestFunction<bent.Json>;
+
+// Type fourth
+declare function bent(arg1: bent.Options, arg2: bent.Options, arg3: bent.Options, type: 'string', ...args: bent.Options[]): bent.RequestFunction<string>;
+declare function bent(arg1: bent.Options, arg2: bent.Options, arg3: bent.Options, type: 'buffer', ...args: bent.Options[]): bent.RequestFunction<Buffer | ArrayBuffer>;
+declare function bent(arg1: bent.Options, arg2: bent.Options, arg3: bent.Options, type: 'json', ...args: bent.Options[]): bent.RequestFunction<bent.Json>;
 
-declare function bent(...args: bent.Options[]): bent.RequestFunction<bent.ValidResponse>;
+// Type fifth
+declare function bent(arg1: bent.Options, arg2: bent.Options, arg3: bent.Options, arg4: bent.Options, type: 'string', ...args: bent.Options[]): bent.RequestFunction<string>;
+declare function bent(arg1: bent.Options, arg2: bent.Options, arg3: bent.Options, arg4: bent.Options, type: 'buffer', ...args: bent.Options[]): bent.RequestFunction<Buffer | ArrayBuffer>;
+declare function bent(arg1: bent.Options, arg2: bent.Options, arg3: bent.Options, arg4: bent.Options, type: 'json', ...args: bent.Options[]): bent.RequestFunction<bent.Json>;
+
+declare function bent(...args: bent.Options[]): bent.RequestFunction<bent.BentResponse>;
 
 // If we get some sort of custom nominal types, or regex literals, we might be able to simplify to something similar to
 // declare function bent(...args: bent.Options[]): bent.RequestFunction<bent.BentResponse>;
@@ -44,17 +54,40 @@ declare namespace bent {
     type Options = HttpMethod | StatusCode | Headers | BaseUrl;
     type RequestBody = string | Stream | Buffer | ArrayBuffer | Json;
     type NodeResponse = PassThrough & {
-        statusCode: number;
-        statusMessage: string;
-        headers: Headers;
+        statusCode: IncomingMessage['statusCode'];
+        status: IncomingMessage['statusCode'];
+        statusMessage: IncomingMessage['statusMessage'];
+        headers: IncomingMessage['headers'];
+        /**
+         * {@link https://github.com/mikeal/bent/blob/v7.3.2/README.md#usage Usage}
+         * {@link https://github.com/mikeal/bent/blob/v7.3.2/src/nodejs.js#L75-L82 Source}
+         * @throws {Error} Calling this method more than once will throw an error "body stream is locked"
+         * @throws {Promise.reject(Error)} The 'error' event raised by the http.IncomingMessage object
+         */
         arrayBuffer(): Promise<Buffer>;
+        /**
+         * {@link https://github.com/mikeal/bent/blob/v7.3.2/README.md#usage Usage}
+         * {@link https://github.com/mikeal/bent/blob/v7.3.2/src/nodejs.js#L83 Source}
+         * @throws {Error} Calling this method more than once will throw an error "body stream is locked"
+         * @throws {Promise.reject(Error)} The 'error' event raised by the http.IncomingMessage object
+         */
         text(): Promise<string>;
+        /**
+         * {@link https://github.com/mikeal/bent/blob/v7.3.2/README.md#usage Usage}
+         * {@link https://github.com/mikeal/bent/blob/v7.3.2/src/nodejs.js#L84-L92 Source}
+         * @throws {Promise.reject(Error)} Calling this method more than once will throw an error "body stream is locked"
+         * @throws {Promise.reject(Error)} The 'error' event raised by the http.IncomingMessage object
+         * @throws {Promise.reject(SyntaxError)} The JSON.parse method throws
+         */
         json(): Promise<Json>;
     };
-    type FetchResponse = Response & { statusCode: number };
-    type BentResponse = NodeResponse | FetchResponse;
+    type BentResponse = NodeResponse;
 
-    type Json = { [key: string]: any; [key: number]: any } | any[];
+    /**
+     * @see http://www.ecma-international.org/publications/standards/Ecma-404.htm
+     * @see https://www.rfc-editor.org/rfc/rfc8259.html
+     */
+    type Json = { [key: string]: Json } | Json[] | string | number | boolean | null;
     type ValidResponse = BentResponse | string | Buffer | ArrayBuffer | Json;
 
     class StatusError extends Error {
