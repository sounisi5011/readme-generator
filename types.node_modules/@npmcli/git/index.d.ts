// Type definitions for @npmcli/git 2.0.2
// Project: https://github.com/npm/git
// Definitions by: sounisi5011 <https://github.com/sounisi5011>

import { SpawnOptions } from 'child_process';

import promiseRetry = require('promise-retry');

import linesToRevs = require('./lib/lines-to-revs');

/**
 * {@link https://github.com/npm/git/blob/v2.0.2/lib/spawn.js Source}
 */
export function spawn(gitArgs: string[]): Promise<Result.spawn<true>>;
export function spawn(
    gitArgs: string[],
    opts: Options.spawn & { stdioString: false | undefined },
): Promise<Result.spawn<false>>;
export function spawn(gitArgs: string[], opts: Options.spawn & { stdioString?: true }): Promise<Result.spawn<true>>;
export function spawn(gitArgs: string[], opts: Options.spawn): Promise<Result.spawn>;

// TODO
// export function clone(...args: unknown[]): unknown;

/**
 * {@link https://github.com/npm/git/blob/v2.0.2/lib/revs.js Source}
 */
export function revs(repo: string, opts?: Options.revs): Promise<ReturnType<typeof linesToRevs>>;

// TODO
// export function is(...args: unknown[]): unknown;

// TODO
// export function find(...args: unknown[]): unknown;

// TODO
// export function isClean(...args: unknown[]): unknown;

/**
 * @see https://github.com/npm/git/blob/v2.0.2/lib/proc-log.js
 */
export interface Logger {
    notice: (...args: unknown[]) => void;
    error: (...args: unknown[]) => void;
    warn: (...args: unknown[]) => void;
    info: (...args: unknown[]) => void;
    verbose: (...args: unknown[]) => void;
    http: (...args: unknown[]) => void;
    silly: (...args: unknown[]) => void;
    pause: (...args: unknown[]) => void;
    resume: (...args: unknown[]) => void;
}

// eslint-disable-next-line @typescript-eslint/ban-types
type PromiseRetryOptions = Exclude<Parameters<typeof promiseRetry>[number], Function>;

export namespace Options {
    /**
     * @see https://github.com/npm/promise-spawn/tree/v1.2.0
     */
    interface PromiseSpawn extends SpawnOptions {
        /**
         * @default true
         * @see https://github.com/npm/git/blob/v2.0.2/lib/opts.js#L3
         */
        stdioString?: boolean;
    }

    export interface spawn extends PromiseSpawn {
        /** @see https://github.com/npm/git/blob/v2.0.2/lib/which.js#L9-L10 */
        git?: string;
        /** @see https://github.com/npm/git/blob/v2.0.2/lib/spawn.js#L14 */
        log?: Logger;
        /** @see https://github.com/npm/git/blob/v2.0.2/lib/spawn.js#L27 */
        retry?: PromiseRetryOptions;
        /**
         * @see https://github.com/npm/git/blob/v2.0.2/lib/spawn.js#L28
         * @default 2
         */
        fetchRetries?: PromiseRetryOptions['retries'];
        /**
         * @see https://github.com/npm/git/blob/v2.0.2/lib/spawn.js#L29
         * @default 10
         */
        fetchRetryFactor?: PromiseRetryOptions['factor'];
        /**
         * @see https://github.com/npm/git/blob/v2.0.2/lib/spawn.js#L30
         * @default 60000
         */
        fetchRetryMaxtimeout?: PromiseRetryOptions['maxTimeout'];
        /**
         * @see https://github.com/npm/git/blob/v2.0.2/lib/spawn.js#L31
         * @default 1000
         */
        fetchRetryMintimeout?: PromiseRetryOptions['minTimeout'];
    }

    export interface revs extends spawn {
        /** @see https://github.com/npm/git/blob/v2.0.2/lib/revs.js#L13 */
        noGitRevCache?: boolean;
    }
}

export namespace Result {
    /**
     * @see https://github.com/npm/promise-spawn/blob/v1.2.0/index.js#L54-L61
     */
    interface PromiseSpawn<TStdioString extends boolean = boolean> {
        cmd: string;
        args: readonly string[];
        code: number;
        signal: NodeJS.Signals | null;
        /**
         * @see https://github.com/npm/promise-spawn/blob/v1.2.0/index.js#L25
         * @see https://github.com/npm/promise-spawn/blob/v1.2.0/index.js#L28
         */
        stdout: TStdioString extends true ? string : Buffer;
        /**
         * @see https://github.com/npm/promise-spawn/blob/v1.2.0/index.js#L26
         * @see https://github.com/npm/promise-spawn/blob/v1.2.0/index.js#L29
         */
        stderr: TStdioString extends true ? string : Buffer;
    }

    export type spawn<TStdioString extends boolean = boolean> = PromiseSpawn<TStdioString>;
}
