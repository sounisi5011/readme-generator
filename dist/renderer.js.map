{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../src/renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import matter from 'gray-matter';\nimport { configure as nunjucksConfigure, Extension as NunjucksExtension } from 'nunjucks';\n\ntype NunjucksRenderStringArgs = Parameters<ReturnType<typeof nunjucksConfigure>['renderString']>;\ntype NunjucksFilterFn = (...args: [unknown, ...unknown[]]) => unknown;\ntype NunjucksExtensionConstructor = new () => NunjucksExtension;\ntype FiltersRecord = Record<string, NunjucksFilterFn>;\ntype ExtensionsArray = readonly NunjucksExtensionConstructor[];\n\nasync function renderNunjucks(\n    templateCode: NunjucksRenderStringArgs[0],\n    templateContext: NunjucksRenderStringArgs[1],\n    { cwd, filters, extensions }: { cwd: string; filters: FiltersRecord; extensions: ExtensionsArray },\n): Promise<string> {\n    const nunjucksEnv = nunjucksConfigure(cwd, {\n        autoescape: false,\n        throwOnUndefined: true,\n    });\n\n    extensions.forEach(ExtensionClass => {\n        nunjucksEnv.addExtension(ExtensionClass.name, new ExtensionClass());\n    });\n\n    Object.entries(filters).forEach(([filterName, filterFunc]) => {\n        nunjucksEnv.addFilter(\n            filterName,\n            (...args) => {\n                const callback = args.pop();\n                (async () => filterFunc(args.shift(), ...args))()\n                    .then(\n                        value => callback(null, value),\n                        async error => {\n                            if (error instanceof Error) {\n                                error.message = `${filterName}() filter / ${error.message}`;\n                            }\n                            throw error;\n                        },\n                    )\n                    .catch(callback);\n            },\n            true,\n        );\n    });\n\n    type renderStringReturnType = Parameters<Exclude<NunjucksRenderStringArgs[2], undefined>>[1];\n    const generateText = await new Promise<renderStringReturnType>(\n        (resolve, reject) => {\n            nunjucksEnv.renderString(\n                templateCode,\n                templateContext,\n                (error, result) => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve(result);\n                    }\n                },\n            );\n        },\n    );\n    if (typeof generateText !== 'string') {\n        throw new Error(\n            'Nunjucks render failed: nunjucks.Environment#renderString() method returned a non-string value',\n        );\n    }\n\n    return generateText;\n}\n\nexport async function renderNunjucksWithFrontmatter(\n    templateCodeWithFrontmatter: string,\n    templateContext: Record<string, unknown>,\n    { cwd, filters, extensions }: { cwd: string; filters: FiltersRecord; extensions: ExtensionsArray },\n): Promise<string> {\n    const { content: templateCode, data: templateData } = matter(templateCodeWithFrontmatter);\n    const frontmatterEndPos = templateCodeWithFrontmatter.length - templateCode.length;\n    const templateFrontmatter = templateCodeWithFrontmatter.substring(0, frontmatterEndPos);\n    const dummyFrontmatter = templateFrontmatter.replace(/[^\\n]+/g, '');\n    const templateCodeWithDummyFrontmatter = dummyFrontmatter + templateCode;\n\n    const generateTextWithDummyFrontmatter = await renderNunjucks(\n        templateCodeWithDummyFrontmatter,\n        { ...templateContext, ...templateData },\n        { cwd, filters, extensions },\n    );\n    const generateText = generateTextWithDummyFrontmatter.substring(dummyFrontmatter.length);\n\n    return generateText;\n}\n"]}