{"version":3,"file":"linesSelectedURL.js","sourceRoot":"","sources":["../../src/template-filters/linesSelectedURL.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolve as resolvePath } from 'path';\n\nimport type hostedGitInfo from 'hosted-git-info';\n\nimport { cwdRelativePath, errorMsgTag, isObject, readFileAsync } from '../utils';\n\nexport interface RepoData {\n    repoType: hostedGitInfo.Hosts;\n    fileFullpath: string;\n    browseURL: string;\n}\n\ninterface Options {\n    start: RegExp;\n    end?: RegExp;\n}\n\ninterface FileData {\n    content: string;\n    lineStartPosList: readonly number[];\n}\n\nfunction copyRegExp(\n    sourceRegExp: RegExp,\n    { addFlags = '', deleteFlags = '' }: { addFlags?: string; deleteFlags?: string } = {},\n): RegExp {\n    return new RegExp(\n        sourceRegExp.source,\n        (\n            sourceRegExp.flags\n                .replace(/./g, char => deleteFlags.includes(char) ? '' : char)\n        ) + addFlags,\n    );\n}\n\nfunction getLinesStartPos(text: string): number[] {\n    const lineBreakRegExp = /\\r\\n?|\\n/g;\n    const lineStartPosList = [0];\n    for (let match; (match = lineBreakRegExp.exec(text));) {\n        lineStartPosList.push(match.index + match[0].length);\n    }\n    return lineStartPosList;\n}\n\nfunction strPos2lineNum(lineStartPosList: readonly number[], strPos: number): number {\n    return (\n        lineStartPosList.findIndex((lineStartPos, index) => {\n            const nextLineStartPos = lineStartPosList[index + 1] ?? Infinity;\n            return lineStartPos <= strPos && strPos < nextLineStartPos;\n        })\n    ) + 1;\n}\n\nfunction isRepoData(value: unknown): value is RepoData {\n    return (\n        isObject(value)\n        && typeof value.repoType === 'string'\n        && typeof value.fileFullpath === 'string'\n        && typeof value.browseURL === 'string'\n    );\n}\n\nfunction isOptions(value: unknown): value is Options {\n    return (\n        isObject(value)\n        && value.start instanceof RegExp\n        && (value.end instanceof RegExp || value.end === undefined)\n    );\n}\n\nfunction normalizeOptions(\n    options: RegExp | Options,\n): { startLineRegExp: RegExp; endLineRegExp: RegExp | null | undefined; isFullMatchMode: boolean } {\n    const startLineRegExp = copyRegExp(\n        options instanceof RegExp ? options : options.start,\n        { deleteFlags: 'gy' },\n    );\n    const endLineRegExp = options instanceof RegExp\n        ? null\n        : options.end && copyRegExp(options.end, { deleteFlags: 'gy' });\n    const isFullMatchMode = options instanceof RegExp;\n\n    return { startLineRegExp, endLineRegExp, isFullMatchMode };\n}\n\nasync function getFileData(fileFullpath: string): Promise<FileData> {\n    const cachedFileData = cacheStore.get(fileFullpath);\n    if (cachedFileData) return cachedFileData;\n\n    const fileContent = await readFileAsync(cwdRelativePath(fileFullpath), 'utf8');\n    return {\n        content: fileContent,\n        lineStartPosList: getLinesStartPos(fileContent),\n    };\n}\nconst cacheStore = new Map<string, FileData>();\n\nfunction getBrowseURLSuffix(\n    { repoData, startLineNumber, endLineNumber }: {\n        repoData: RepoData;\n        startLineNumber: number;\n        endLineNumber: number;\n    },\n): string {\n    const suffixRecord: Record<hostedGitInfo.Hosts, { single: string; multi_: string }> = {\n        'github': {\n            single: `#L${startLineNumber}`,\n            multi_: `#L${startLineNumber}-L${endLineNumber}`,\n        },\n        'gitlab': {\n            single: `#L${startLineNumber}`,\n            multi_: `#L${startLineNumber}-${endLineNumber}`,\n        },\n        'bitbucket': {\n            single: `#lines-${startLineNumber}`,\n            multi_: `#lines-${startLineNumber}:${endLineNumber}`,\n        },\n        'gist': {\n            single: `-L${startLineNumber}`,\n            multi_: `-L${startLineNumber}-L${endLineNumber}`,\n        },\n    };\n\n    const isMultiLine = endLineNumber && startLineNumber !== endLineNumber;\n    const suffix = suffixRecord[repoData.repoType];\n    if (suffix) return isMultiLine ? suffix.multi_ : suffix.single;\n\n    throw new Error(errorMsgTag`Unknown repoData.repoType value: ${repoData.repoType}`);\n}\n\nfunction calculateLineNumber(\n    { lineStartPosList, startLineRegExp, endLineRegExp, isFullMatchMode, fileContent }: {\n        lineStartPosList: readonly number[];\n        startLineRegExp: RegExp;\n        endLineRegExp: RegExp | null | undefined;\n        isFullMatchMode: boolean;\n        fileContent: string;\n    },\n): { startLineNumber: number; endLineNumber: number } {\n    const [startLineNumber, endLineNumber] = lineStartPosList.reduce(\n        (\n            [startLineNumber, endLineNumber, triedMatch],\n            lineStartPos,\n            index,\n        ) => {\n            const currentLineNumber = index + 1;\n            const isTryStartLineMatching = !startLineNumber\n                && (!startLineRegExp.multiline || !triedMatch.start);\n            const isTryEndLineMatching = endLineRegExp\n                && !endLineNumber\n                && (!endLineRegExp.multiline || !triedMatch.end);\n\n            if (isTryStartLineMatching || isTryEndLineMatching) {\n                const text = fileContent.substring(lineStartPos);\n\n                if (isTryStartLineMatching) {\n                    const match = startLineRegExp.exec(text);\n                    triedMatch.start = true;\n\n                    if (match) {\n                        const matchStartPos = lineStartPos + match.index;\n                        const matchEndPos = matchStartPos + match[0].length;\n                        if (isFullMatchMode) {\n                            startLineNumber = strPos2lineNum(lineStartPosList, matchStartPos);\n                            endLineNumber = strPos2lineNum(lineStartPosList, matchEndPos);\n                        } else {\n                            startLineNumber = strPos2lineNum(lineStartPosList, matchEndPos);\n                        }\n                    }\n                }\n                if (\n                    endLineRegExp\n                    && isTryEndLineMatching\n                    && startLineNumber\n                    && startLineNumber <= currentLineNumber\n                ) {\n                    const match = endLineRegExp.exec(text);\n                    triedMatch.end = true;\n\n                    if (match) {\n                        const matchEndPos = lineStartPos + match.index + match[0].length;\n                        endLineNumber = strPos2lineNum(lineStartPosList, matchEndPos);\n                    }\n                }\n            }\n\n            return [startLineNumber, endLineNumber, triedMatch];\n        },\n        [0, 0, { start: false, end: false }],\n    );\n    return { startLineNumber, endLineNumber };\n}\n\nexport async function linesSelectedURL(repoData: unknown, options: unknown): Promise<string> {\n    if (!isRepoData(repoData)) throw new TypeError(errorMsgTag`Invalid repoData value: ${repoData}`);\n    if (!(options instanceof RegExp || isOptions(options))) {\n        throw new TypeError(errorMsgTag`Invalid options value: ${options}`);\n    }\n    const { startLineRegExp, endLineRegExp, isFullMatchMode } = normalizeOptions(options);\n\n    const fileFullpath = resolvePath(repoData.fileFullpath);\n    const { content: fileContent, lineStartPosList } = await getFileData(fileFullpath);\n\n    const { startLineNumber, endLineNumber } = calculateLineNumber(\n        { lineStartPosList, startLineRegExp, endLineRegExp, isFullMatchMode, fileContent },\n    );\n    if (!startLineNumber) {\n        const filepath = cwdRelativePath(fileFullpath);\n        throw new Error(\n            errorMsgTag`RegExp does not match with ${filepath} contents. The following pattern was passed in`\n                + (options instanceof RegExp\n                    ? errorMsgTag` the argument: ${startLineRegExp}`\n                    : errorMsgTag` the options.start argument: ${startLineRegExp}`),\n        );\n    }\n    if (endLineRegExp && !endLineNumber) {\n        throw new Error(\n            errorMsgTag`RegExp does not match with ${cwdRelativePath(fileFullpath)} contents.`\n                + errorMsgTag` The following pattern was passed in the options.end argument: ${endLineRegExp}`,\n        );\n    }\n\n    return repoData.browseURL + getBrowseURLSuffix({ repoData, startLineNumber, endLineNumber });\n}\n"]}