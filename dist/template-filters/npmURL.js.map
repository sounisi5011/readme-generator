{"version":3,"file":"npmURL.js","sourceRoot":"","sources":["../../src/template-filters/npmURL.ts"],"names":[],"mappings":";;;;;;AAAA,sEAAkC;AAElC,oCAA+E;AAE/E,SAAS,SAAS,CAAC,WAAmB,EAAE,cAAc,GAAG,EAAE;IACvD,OAAO,cAAc;QACjB,CAAC,CAAC,iCAAiC,WAAW,MAAM,cAAc,EAAE;QACpE,CAAC,CAAC,iCAAiC,WAAW,EAAE,CAAC;AACzD,CAAC;AAED,SAAS,kBAAkB,CAAC,WAAmB;IAC3C,MAAM,MAAM,GAAG,kBAAU,CAAC,GAAG,EAAE,CAAC,yBAAG,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACzD,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,wBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;QACjG,OAAO,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;KACjD;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,SAAgB,MAAM,CAAC,WAAoB;IACvC,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;QACjC,MAAM,MAAM,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAC/C,IAAI,MAAM;YAAE,OAAO,MAAM,CAAC;KAC7B;SAAM,IAAI,gBAAQ,CAAC,WAAW,CAAC,IAAI,wBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,wBAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE;QAC7G,OAAO,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;KAC3D;IACD,MAAM,IAAI,SAAS,CAAC,mBAAW,CAAA,8BAA8B,WAAW,EAAE,CAAC,CAAC;AAChF,CAAC;AARD,wBAQC","sourcesContent":["import npa from 'npm-package-arg';\n\nimport { catchError, errorMsgTag, isNonEmptyString, isObject } from '../utils';\n\nfunction getNpmURL(packageName: string, packageVersion = ''): string {\n    return packageVersion\n        ? `https://www.npmjs.com/package/${packageName}/v/${packageVersion}`\n        : `https://www.npmjs.com/package/${packageName}`;\n}\n\nfunction packageName2npmURL(packageName: string): string | null {\n    const result = catchError(() => npa(packageName.trim()));\n    if (result && (result.type === 'tag' || result.type === 'version') && isNonEmptyString(result.name)) {\n        return getNpmURL(result.name, result.rawSpec);\n    }\n    return null;\n}\n\nexport function npmURL(packageData: unknown): string {\n    if (typeof packageData === 'string') {\n        const npmURL = packageName2npmURL(packageData);\n        if (npmURL) return npmURL;\n    } else if (isObject(packageData) && isNonEmptyString(packageData.name) && isNonEmptyString(packageData.version)) {\n        return getNpmURL(packageData.name, packageData.version);\n    }\n    throw new TypeError(errorMsgTag`Invalid packageData value: ${packageData}`);\n}\n"]}