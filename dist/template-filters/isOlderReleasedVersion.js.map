{"version":3,"file":"isOlderReleasedVersion.js","sourceRoot":"","sources":["../../src/template-filters/isOlderReleasedVersion.ts"],"names":[],"mappings":";;;AAMA,KAAK,UAAU,WAAW,CACtB,EAAE,iBAAiB,EAAE,mBAAmB,EAGvC;IAED,MAAM,cAAc,GAAG,MAAM,iBAAiB,EAAE,CAAC;IACjD,IAAI,CAAC,cAAc;QAAE,OAAO,IAAI,CAAC;IAEjC,MAAM,gBAAgB,GAAG,MAAM,mBAAmB,EAAE,CAAC;IACrD,IAAI,CAAC,gBAAgB;QAAE,OAAO,IAAI,CAAC;IAEnC,OAAO,EAAE,cAAc,EAAE,gBAAgB,EAAE,CAAC;AAChD,CAAC;AAED,SAAgB,yBAAyB,CACrC,EAAE,iBAAiB,EAAE,mBAAmB,EAGvC;IAED,OAAO,KAAK,UAAU,sBAAsB,CAAC,OAAe;QACxD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,CAAC,CAAC;QAC3E,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QACvB,MAAM,EAAE,cAAc,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC;QAElD,MAAM,UAAU,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU;YAAE,OAAO,KAAK,CAAC;QAE9B,OAAO,CAAC,MAAM,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,cAAc,CAAC;IACnE,CAAC,CAAC;AACN,CAAC;AAhBD,8DAgBC","sourcesContent":["import type { ReleasedVersions } from '../utils/repository';\n\ntype GetHeadCommitSha1Fn = () => Promise<string | null>;\n// eslint-disable-next-line @typescript-eslint/no-invalid-void-type\ntype GetReleasedVersions = () => Promise<void | ReleasedVersions>;\n\nasync function getRepoData(\n    { getHeadCommitSha1, getReleasedVersions }: {\n        getHeadCommitSha1: GetHeadCommitSha1Fn;\n        getReleasedVersions: GetReleasedVersions;\n    },\n): Promise<{ headCommitSha1: string; releasedVersions: ReleasedVersions } | null> {\n    const headCommitSha1 = await getHeadCommitSha1();\n    if (!headCommitSha1) return null;\n\n    const releasedVersions = await getReleasedVersions();\n    if (!releasedVersions) return null;\n\n    return { headCommitSha1, releasedVersions };\n}\n\nexport function isOlderReleasedVersionGen(\n    { getHeadCommitSha1, getReleasedVersions }: {\n        getHeadCommitSha1: GetHeadCommitSha1Fn;\n        getReleasedVersions: GetReleasedVersions;\n    },\n) {\n    return async function isOlderReleasedVersion(version: string): Promise<boolean | null> {\n        const data = await getRepoData({ getHeadCommitSha1, getReleasedVersions });\n        if (!data) return null;\n        const { headCommitSha1, releasedVersions } = data;\n\n        const versionTag = releasedVersions.get(version);\n        if (!versionTag) return false;\n\n        return (await versionTag.fetchCommitSHA1()) !== headCommitSha1;\n    };\n}\n"]}