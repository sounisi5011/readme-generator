{"version":3,"file":"isOlderReleasedVersion.js","sourceRoot":"","sources":["../../src/template-filters/isOlderReleasedVersion.ts"],"names":[],"mappings":";;;AACA,oCAAuD;AAGvD,KAAK,UAAU,WAAW,CACtB,EACI,iBAAiB,EACjB,mBAAmB,GAItB;IAED,0DAA0D;IAC1D,MAAM,cAAc,GAAG,MAAM,iBAAiB,EAAE,CAAC;IACjD,IAAI,CAAC,cAAc;QAAE,OAAO,IAAI,CAAC;IAEjC,MAAM,gBAAgB,GAAG,MAAM,mBAAmB,EAAE,CAAC;IACrD,IAAI,CAAC,gBAAgB;QAAE,OAAO,IAAI,CAAC;IAEnC,OAAO,EAAE,cAAc,EAAE,gBAAgB,EAAE,CAAC;AAChD,CAAC;AAED,SAAgB,yBAAyB,CACrC,EACI,iBAAiB,EACjB,mBAAmB,GAItB;IAED,OAAO,KAAK,UAAU,sBAAsB,CAAC,OAAgB;QACzD,sBAAc,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC,mBAAW,CAAA,0BAA0B,OAAO,EAAE,CAAC,CAAC,CAAC;QAEvF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,CAAC,CAAC;QAC3E,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QACvB,MAAM,EAAE,cAAc,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC;QAElD,MAAM,UAAU,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU;YAAE,OAAO,KAAK,CAAC;QAE9B,OAAO,CAAC,MAAM,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,cAAc,CAAC;IACnE,CAAC,CAAC;AACN,CAAC;AArBD,8DAqBC","sourcesContent":["import type { GetHeadCommitSha1Fn, GetReleasedVersionsFn } from '../main';\nimport { errorMsgTag, validateString } from '../utils';\nimport type { ReleasedVersions } from '../utils/repository';\n\nasync function getRepoData(\n    {\n        getHeadCommitSha1,\n        getReleasedVersions,\n    }: {\n        getHeadCommitSha1: GetHeadCommitSha1Fn;\n        getReleasedVersions: GetReleasedVersionsFn;\n    },\n): Promise<{ headCommitSha1: string; releasedVersions: ReleasedVersions } | null> {\n    // TODO: Ensure that Promise returns null even if it fails\n    const headCommitSha1 = await getHeadCommitSha1();\n    if (!headCommitSha1) return null;\n\n    const releasedVersions = await getReleasedVersions();\n    if (!releasedVersions) return null;\n\n    return { headCommitSha1, releasedVersions };\n}\n\nexport function isOlderReleasedVersionGen(\n    {\n        getHeadCommitSha1,\n        getReleasedVersions,\n    }: {\n        getHeadCommitSha1: GetHeadCommitSha1Fn;\n        getReleasedVersions: GetReleasedVersionsFn;\n    },\n) {\n    return async function isOlderReleasedVersion(version: unknown): Promise<boolean | null> {\n        validateString(version, new TypeError(errorMsgTag`Invalid version value: ${version}`));\n\n        const data = await getRepoData({ getHeadCommitSha1, getReleasedVersions });\n        if (!data) return null;\n        const { headCommitSha1, releasedVersions } = data;\n\n        const versionTag = releasedVersions.get(version);\n        if (!versionTag) return false;\n\n        return (await versionTag.fetchCommitSHA1()) !== headCommitSha1;\n    };\n}\n"]}