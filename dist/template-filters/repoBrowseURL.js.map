{"version":3,"file":"repoBrowseURL.js","sourceRoot":"","sources":["../../src/template-filters/repoBrowseURL.ts"],"names":[],"mappings":";;;AAAA,+BAAiF;AAKjF,oCAAgE;AAKhE,SAAS,mBAAmB,CAAC,QAAiB;IAC1C,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAC9B,MAAM,IAAI,SAAS,CAAC,mBAAW,CAAA,2BAA2B,QAAQ,EAAE,CAAC,CAAC;KACzE;AACL,CAAC;AAED,SAAS,kBAAkB,CAAC,OAAgB;IACxC,IAAI,CAAC,gBAAQ,CAAC,OAAO,CAAC,EAAE;QACpB,MAAM,IAAI,SAAS,CAAC,mBAAW,CAAA,0BAA0B,OAAO,EAAE,CAAC,CAAC;KACvE;AACL,CAAC;AAED,SAAS,eAAe,CACpB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,WAAW,EAAuE;IAEhH,OAAO,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC9B,CAAC,CAAC,cAAW,CAAC,cAAO,CAAC,gBAAgB,CAAC,EAAE,QAAQ,CAAC;QAClD,CAAC,CAAC,cAAW,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;AACnE,CAAC;AAED,KAAK,UAAU,aAAa,CACxB,EAAE,aAAa,EAAE,OAAO,EAAE,OAAO,EAAE,qBAAqB,EAKvD;IAED,MAAM,mBAAmB,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;IACnD,IAAI,mBAAmB,EAAE;QACrB,OAAO,mBAAmB,CAAC;KAC9B;IAED,IAAI,OAAO,EAAE;QACT,IAAI,MAAM,qBAAqB,EAAE,EAAE;YAC/B,OAAO,IAAI,OAAO,EAAE,CAAC;SACxB;KACJ;IACD,OAAO,EAAE,CAAC;AACd,CAAC;AAED,+HAA+H;AAC/H,SAAgB,gBAAgB,CAC5B,EAAE,gBAAgB,EAAE,WAAW,EAAE,aAAa,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,OAAO,EAAE,OAAO,EAQvG;IAED,MAAM,qBAAqB,GAAG,qBAAa,CAAC,KAAK,IAAI,EAAE;QACnD,MAAM,cAAc,GAAG,MAAM,iBAAiB,EAAE,CAAC;QACjD,IAAI,CAAC,cAAc;YAAE,OAAO,KAAK,CAAC;QAElC,MAAM,gBAAgB,GAAG,MAAM,mBAAmB,EAAE,CAAC;QACrD,IAAI,CAAC,gBAAgB;YAAE,OAAO,KAAK,CAAC;QAEpC,MAAM,UAAU,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU;YAAE,OAAO,IAAI,CAAC;QAE7B,OAAO,CAAC,MAAM,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,cAAc,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,OAAO,KAAK,UAAU,aAAa,CAAC,QAAiB,EAAE,UAAmB,EAAE;QACxE,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QAC9B,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAE5B,MAAM,YAAY,GAAG,eAAe,CAAC,EAAE,QAAQ,EAAE,gBAAgB,EAAE,WAAW,EAAE,CAAC,CAAC;QAClF,MAAM,WAAW,GAAG,eAAY,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;QAE5D,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,EAAE,aAAa,EAAE,OAAO,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC,CAAC;QACnG,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9D,OAAO;YACH,QAAQ,EAAE,OAAO,CAAC,IAAI;YACtB,WAAW;YACX,SAAS;YACT,YAAY;YACZ,QAAQ;gBACJ,OAAO,SAAS,CAAC;YACrB,CAAC;SACJ,CAAC;IACN,CAAC,CAAC;AACN,CAAC;AA3CD,4CA2CC","sourcesContent":["import { dirname, relative as relativePath, resolve as resolvePath } from 'path';\n\nimport type hostedGitInfo from 'hosted-git-info';\n\nimport type { GetCommittishFn, GetHeadCommitSha1Fn, GetReleasedVersionsFn } from '../main';\nimport { cachedPromise, errorMsgTag, isObject } from '../utils';\nimport type { RepoData } from './linesSelectedURL';\n\ntype RepoBrowseURLResult = RepoData & { gitRepoPath: string; toString: () => string };\n\nfunction validateFilepathArg(filepath: unknown): asserts filepath is string {\n    if (typeof filepath !== 'string') {\n        throw new TypeError(errorMsgTag`Invalid filepath value: ${filepath}`);\n    }\n}\n\nfunction validateOptionsArg(options: unknown): asserts options is Record<PropertyKey, unknown> {\n    if (!isObject(options)) {\n        throw new TypeError(errorMsgTag`Invalid options value: ${options}`);\n    }\n}\n\nfunction resolveFilepath(\n    { filepath, templateFullpath, gitRootPath }: { filepath: string; templateFullpath: string; gitRootPath: string },\n): string {\n    return /^\\.{1,2}\\//.test(filepath)\n        ? resolvePath(dirname(templateFullpath), filepath)\n        : resolvePath(gitRootPath, filepath.replace(/^[/]+/g, ''));\n}\n\nasync function genCommittish(\n    { getCommittish, options, version, isUseVersionBrowseURL }: {\n        getCommittish: GetCommittishFn;\n        options: Record<PropertyKey, unknown>;\n        version: string;\n        isUseVersionBrowseURL: () => Promise<boolean>;\n    },\n): Promise<string> {\n    const committishInOptions = getCommittish(options);\n    if (committishInOptions) {\n        return committishInOptions;\n    }\n\n    if (version) {\n        if (await isUseVersionBrowseURL()) {\n            return `v${version}`;\n        }\n    }\n    return '';\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/explicit-module-boundary-types\nexport function repoBrowseURLGen(\n    { templateFullpath, gitRootPath, getCommittish, getHeadCommitSha1, getReleasedVersions, version, gitInfo }: {\n        templateFullpath: string;\n        gitRootPath: string;\n        getCommittish: GetCommittishFn;\n        getHeadCommitSha1: GetHeadCommitSha1Fn;\n        getReleasedVersions: GetReleasedVersionsFn;\n        version: string;\n        gitInfo: hostedGitInfo;\n    },\n) {\n    const isUseVersionBrowseURL = cachedPromise(async () => {\n        const headCommitSha1 = await getHeadCommitSha1();\n        if (!headCommitSha1) return false;\n\n        const releasedVersions = await getReleasedVersions();\n        if (!releasedVersions) return false;\n\n        const versionTag = releasedVersions.get(version);\n        if (!versionTag) return true;\n\n        return (await versionTag.fetchCommitSHA1()) === headCommitSha1;\n    });\n\n    return async function repoBrowseURL(filepath: unknown, options: unknown = {}): Promise<RepoBrowseURLResult> {\n        validateFilepathArg(filepath);\n        validateOptionsArg(options);\n\n        const fileFullpath = resolveFilepath({ filepath, templateFullpath, gitRootPath });\n        const gitRepoPath = relativePath(gitRootPath, fileFullpath);\n\n        const committish = await genCommittish({ getCommittish, options, version, isUseVersionBrowseURL });\n        const browseURL = gitInfo.browse(gitRepoPath, { committish });\n        return {\n            repoType: gitInfo.type,\n            gitRepoPath,\n            browseURL,\n            fileFullpath,\n            toString() {\n                return browseURL;\n            },\n        };\n    };\n}\n"]}