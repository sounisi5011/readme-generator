{"version":3,"file":"repoBrowseURL.js","sourceRoot":"","sources":["../../src/template-filters/repoBrowseURL.ts"],"names":[],"mappings":";;;AAAA,+BAAiF;AAIjF,oCAAoC;AACpC,gDAAgD;AAKhD,SAAgB,gBAAgB,CAC5B,EAAE,gBAAgB,EAAE,WAAW,EAAE,aAAa,EAAE,OAAO,EAAE,qBAAqB,EAAE,OAAO,EAOtF;IAED,OAAO,KAAK,UAAU,aAAa,CAAC,QAAiB,EAAE,UAAmB,EAAE;;QACxE,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAC9B,MAAM,IAAI,SAAS,CAAC,sBAAW,CAAA,2BAA2B,QAAQ,EAAE,CAAC,CAAC;SACzE;QACD,IAAI,CAAC,gBAAQ,CAAC,OAAO,CAAC,EAAE;YACpB,MAAM,IAAI,SAAS,CAAC,sBAAW,CAAA,0BAA0B,OAAO,EAAE,CAAC,CAAC;SACvE;QAED,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC5C,CAAC,CAAC,cAAW,CAAC,cAAO,CAAC,gBAAgB,CAAC,EAAE,QAAQ,CAAC;YAClD,CAAC,CAAC,cAAW,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/D,MAAM,WAAW,GAAG,eAAY,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;QAE5D,MAAM,UAAU,SAAG,aAAa,CAAC,OAAO,CAAC,mCAClC,CAAC,OAAO,IAAI,CAAC,MAAM,qBAAqB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACzE,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9D,OAAO;YACH,QAAQ,EAAE,OAAO,CAAC,IAAI;YACtB,WAAW;YACX,SAAS;YACT,YAAY;YACZ,QAAQ;gBACJ,OAAO,SAAS,CAAC;YACrB,CAAC;SACJ,CAAC;IACN,CAAC,CAAC;AACN,CAAC;AApCD,4CAoCC","sourcesContent":["import { dirname, relative as relativePath, resolve as resolvePath } from 'path';\n\nimport type hostedGitInfo from 'hosted-git-info';\n\nimport { isObject } from '../utils';\nimport { errorMsgTag } from '../utils/nunjucks';\nimport type { RepoData } from './linesSelectedURL';\n\ntype RepoBrowseURLResult = RepoData & { gitRepoPath: string; toString: () => string };\n\nexport function repoBrowseURLGen(\n    { templateFullpath, gitRootPath, getCommittish, version, isUseVersionBrowseURL, gitInfo }: {\n        templateFullpath: string;\n        gitRootPath: string;\n        getCommittish: (options: Record<string, unknown>) => string | undefined;\n        version: string;\n        isUseVersionBrowseURL: () => Promise<boolean>;\n        gitInfo: hostedGitInfo;\n    },\n) {\n    return async function repoBrowseURL(filepath: unknown, options: unknown = {}): Promise<RepoBrowseURLResult> {\n        if (typeof filepath !== 'string') {\n            throw new TypeError(errorMsgTag`Invalid filepath value: ${filepath}`);\n        }\n        if (!isObject(options)) {\n            throw new TypeError(errorMsgTag`Invalid options value: ${options}`);\n        }\n\n        const fileFullpath = /^\\.{1,2}\\//.test(filepath)\n            ? resolvePath(dirname(templateFullpath), filepath)\n            : resolvePath(gitRootPath, filepath.replace(/^[/]+/g, ''));\n        const gitRepoPath = relativePath(gitRootPath, fileFullpath);\n\n        const committish = getCommittish(options)\n            ?? (version && (await isUseVersionBrowseURL()) ? `v${version}` : '');\n        const browseURL = gitInfo.browse(gitRepoPath, { committish });\n        return {\n            repoType: gitInfo.type,\n            gitRepoPath,\n            browseURL,\n            fileFullpath,\n            toString() {\n                return browseURL;\n            },\n        };\n    };\n}\n"]}