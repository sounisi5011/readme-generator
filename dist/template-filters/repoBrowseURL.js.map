{"version":3,"file":"repoBrowseURL.js","sourceRoot":"","sources":["../../src/template-filters/repoBrowseURL.ts"],"names":[],"mappings":";;;AAAA,+BAAiF;AAKjF,oCAAgF;AAMhF,SAAS,kBAAkB,CAAC,OAAgB;IACxC,IAAI,CAAC,gBAAQ,CAAC,OAAO,CAAC,EAAE;QACpB,MAAM,IAAI,SAAS,CAAC,mBAAW,CAAA,0BAA0B,OAAO,EAAE,CAAC,CAAC;KACvE;AACL,CAAC;AAED,SAAS,eAAe,CACpB,EACI,QAAQ,EACR,gBAAgB,EAChB,WAAW,GAKd;IAED,OAAO,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC9B,CAAC,CAAC,cAAW,CAAC,cAAO,CAAC,gBAAgB,CAAC,EAAE,QAAQ,CAAC;QAClD,CAAC,CAAC,cAAW,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;AACnE,CAAC;AAED,SAAS,0BAA0B,CAC/B,EACI,iBAAiB,EACjB,mBAAmB,EACnB,OAAO,GAKV;IAED,OAAO,qBAAa,CAAC,KAAK,IAAI,EAAE;QAC5B,MAAM,cAAc,GAAG,MAAM,iBAAiB,EAAE,CAAC;QACjD,IAAI,CAAC,cAAc;YAAE,OAAO,KAAK,CAAC;QAElC,MAAM,gBAAgB,GAAG,MAAM,mBAAmB,EAAE,CAAC;QACrD,IAAI,CAAC,gBAAgB;YAAE,OAAO,KAAK,CAAC;QAEpC,MAAM,UAAU,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU;YAAE,OAAO,IAAI,CAAC;QAE7B,OAAO,CAAC,MAAM,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,cAAc,CAAC;IACnE,CAAC,CAAC,CAAC;AACP,CAAC;AAED,KAAK,UAAU,aAAa,CACxB,EACI,aAAa,EACb,OAAO,EACP,OAAO,EACP,qBAAqB,GAMxB;IAED,MAAM,mBAAmB,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;IACnD,IAAI,mBAAmB,EAAE;QACrB,OAAO,mBAAmB,CAAC;KAC9B;IAED,IAAI,OAAO,EAAE;QACT,IAAI,MAAM,qBAAqB,EAAE,EAAE;YAC/B,OAAO,IAAI,OAAO,EAAE,CAAC;SACxB;KACJ;IACD,OAAO,EAAE,CAAC;AACd,CAAC;AAED,+HAA+H;AAC/H,SAAgB,gBAAgB,CAC5B,EACI,gBAAgB,EAChB,WAAW,EACX,aAAa,EACb,iBAAiB,EACjB,mBAAmB,EACnB,OAAO,EACP,OAAO,GASV;IAED,MAAM,qBAAqB,GAAG,0BAA0B,CAAC,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,CAAC;IAE9G,OAAO,KAAK,UAAU,aAAa,CAAC,QAAiB,EAAE,UAAmB,EAAE;QACxE,sBAAc,CAAC,QAAQ,EAAE,IAAI,SAAS,CAAC,mBAAW,CAAA,2BAA2B,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC1F,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAE5B,MAAM,YAAY,GAAG,eAAe,CAAC;YACjC,QAAQ;YACR,gBAAgB;YAChB,WAAW;SACd,CAAC,CAAC;QACH,MAAM,WAAW,GAAG,eAAY,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;QAE5D,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC;YACnC,aAAa;YACb,OAAO;YACP,OAAO;YACP,qBAAqB;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9D,OAAO;YACH,QAAQ,EAAE,OAAO,CAAC,IAAI;YACtB,WAAW;YACX,SAAS;YACT,YAAY;YACZ,QAAQ;gBACJ,OAAO,SAAS,CAAC;YACrB,CAAC;SACJ,CAAC;IACN,CAAC,CAAC;AACN,CAAC;AAjDD,4CAiDC","sourcesContent":["import { dirname, relative as relativePath, resolve as resolvePath } from 'path';\n\nimport type hostedGitInfo from 'hosted-git-info';\n\nimport type { GetCommittishFn, GetHeadCommitSha1Fn, GetReleasedVersionsFn } from '../main';\nimport { cachedPromise, errorMsgTag, isObject, validateString } from '../utils';\nimport type { RepoData } from './linesSelectedURL';\n\ntype RepoBrowseURLResult = RepoData & { gitRepoPath: string; toString: () => string };\ntype IsUseVersionBrowseURLFn = () => Promise<boolean>;\n\nfunction validateOptionsArg(options: unknown): asserts options is Record<PropertyKey, unknown> {\n    if (!isObject(options)) {\n        throw new TypeError(errorMsgTag`Invalid options value: ${options}`);\n    }\n}\n\nfunction resolveFilepath(\n    {\n        filepath,\n        templateFullpath,\n        gitRootPath,\n    }: {\n        filepath: string;\n        templateFullpath: string;\n        gitRootPath: string;\n    },\n): string {\n    return /^\\.{1,2}\\//.test(filepath)\n        ? resolvePath(dirname(templateFullpath), filepath)\n        : resolvePath(gitRootPath, filepath.replace(/^[/]+/g, ''));\n}\n\nfunction genIsUseVersionBrowseURLFn(\n    {\n        getHeadCommitSha1,\n        getReleasedVersions,\n        version,\n    }: {\n        getHeadCommitSha1: GetHeadCommitSha1Fn;\n        getReleasedVersions: GetReleasedVersionsFn;\n        version: string;\n    },\n): IsUseVersionBrowseURLFn {\n    return cachedPromise(async () => {\n        const headCommitSha1 = await getHeadCommitSha1();\n        if (!headCommitSha1) return false;\n\n        const releasedVersions = await getReleasedVersions();\n        if (!releasedVersions) return false;\n\n        const versionTag = releasedVersions.get(version);\n        if (!versionTag) return true;\n\n        return (await versionTag.fetchCommitSHA1()) === headCommitSha1;\n    });\n}\n\nasync function genCommittish(\n    {\n        getCommittish,\n        options,\n        version,\n        isUseVersionBrowseURL,\n    }: {\n        getCommittish: GetCommittishFn;\n        options: Record<PropertyKey, unknown>;\n        version: string;\n        isUseVersionBrowseURL: IsUseVersionBrowseURLFn;\n    },\n): Promise<string> {\n    const committishInOptions = getCommittish(options);\n    if (committishInOptions) {\n        return committishInOptions;\n    }\n\n    if (version) {\n        if (await isUseVersionBrowseURL()) {\n            return `v${version}`;\n        }\n    }\n    return '';\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/explicit-module-boundary-types\nexport function repoBrowseURLGen(\n    {\n        templateFullpath,\n        gitRootPath,\n        getCommittish,\n        getHeadCommitSha1,\n        getReleasedVersions,\n        version,\n        gitInfo,\n    }: {\n        templateFullpath: string;\n        gitRootPath: string;\n        getCommittish: GetCommittishFn;\n        getHeadCommitSha1: GetHeadCommitSha1Fn;\n        getReleasedVersions: GetReleasedVersionsFn;\n        version: string;\n        gitInfo: hostedGitInfo;\n    },\n) {\n    const isUseVersionBrowseURL = genIsUseVersionBrowseURLFn({ getHeadCommitSha1, getReleasedVersions, version });\n\n    return async function repoBrowseURL(filepath: unknown, options: unknown = {}): Promise<RepoBrowseURLResult> {\n        validateString(filepath, new TypeError(errorMsgTag`Invalid filepath value: ${filepath}`));\n        validateOptionsArg(options);\n\n        const fileFullpath = resolveFilepath({\n            filepath,\n            templateFullpath,\n            gitRootPath,\n        });\n        const gitRepoPath = relativePath(gitRootPath, fileFullpath);\n\n        const committish = await genCommittish({\n            getCommittish,\n            options,\n            version,\n            isUseVersionBrowseURL,\n        });\n        const browseURL = gitInfo.browse(gitRepoPath, { committish });\n        return {\n            repoType: gitInfo.type,\n            gitRepoPath,\n            browseURL,\n            fileFullpath,\n            toString() {\n                return browseURL;\n            },\n        };\n    };\n}\n"]}