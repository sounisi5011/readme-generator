{"version":3,"file":"setProp.js","sourceRoot":"","sources":["../../src/template-tags/setProp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as nunjucks from 'nunjucks';\nimport * as util from 'util';\n\nimport type { Extension as NunjucksExtension } from '../types/nunjucks-extension';\nimport type * as NunjucksNodes from '../types/nunjucks-extension/nunjucks/src/nodes';\nimport { isObject } from '../utils';\n\nfunction isNonNullable<TValue>(value: TValue): value is NonNullable<TValue> {\n    return value !== null && value !== undefined;\n}\n\nexport default class SetPropExtension implements NunjucksExtension {\n    public tags = ['setProp'];\n\n    public parse(\n        parser: NunjucksExtension.Parser,\n        nodes: NunjucksExtension.Nodes,\n        // lexer: NunjucksExtension.Lexer,\n    ): NunjucksExtension.ParseResult {\n        const getObjectPath = this.genGetObjectPath(nodes);\n        const value2node = this.genValue2node(nodes);\n\n        const tagNameSymbolToken = parser.nextToken();\n        const argsNodeList = parser.parseSignature(null, true);\n        if (tagNameSymbolToken) {\n            parser.advanceAfterBlockEnd(tagNameSymbolToken.value);\n        }\n\n        const bodyNodeList = parser.parseUntilBlocks('endsetProp', 'endset');\n\n        parser.advanceAfterBlockEnd();\n\n        const objectPathList = argsNodeList.children\n            .map((childNode) => {\n                if (\n                    childNode instanceof nodes.LookupVal ||\n                    childNode instanceof nodes.Symbol\n                ) {\n                    const objectPath = getObjectPath(childNode);\n                    return objectPath;\n                }\n                return null;\n            })\n            .filter(isNonNullable);\n\n        return new nodes.CallExtension(\n            this,\n            'run',\n            new nodes.NodeList(argsNodeList.lineno, argsNodeList.colno, [\n                value2node(\n                    {\n                        objectPathList,\n                    },\n                    argsNodeList.lineno,\n                    argsNodeList.colno,\n                ),\n            ]),\n            [bodyNodeList],\n        );\n    }\n\n    public run(\n        context: {\n            env: unknown;\n            ctx: Record<string, unknown>;\n            blocks: unknown;\n            exported: unknown;\n        },\n        arg: { objectPathList: string[][] },\n        body: () => string,\n    ): nunjucks.runtime.SafeString {\n        const bodyStr = body();\n\n        for (const objectPath of arg.objectPathList) {\n            let obj: Record<string, unknown> = context.ctx;\n            objectPath.forEach((propName, index) => {\n                const isLast = objectPath.length - 1 === index;\n\n                if (isLast) {\n                    obj[propName] = bodyStr;\n                } else {\n                    const o = obj[propName];\n                    if (!isObject(o)) {\n                        throw new TypeError(\n                            'setProp tag / Cannot be assigned to `' +\n                                this.toPropString(objectPath) +\n                                '`! `' +\n                                this.toPropString(\n                                    objectPath.slice(0, index + 1),\n                                ) +\n                                '` variable value is ' +\n                                (o === null ? 'null' : typeof o) +\n                                ', not an object',\n                        );\n                    }\n                    obj = o;\n                }\n            });\n        }\n\n        return new nunjucks.runtime.SafeString('');\n    }\n\n    private toPropString(objectPath: string[]): string {\n        /**\n         * @see https://www.ecma-international.org/ecma-262/9.0/index.html#prod-IdentifierName\n         */\n        const ECMAScript2018IdentifierNameRegExp = /^[\\p{ID_Start}$_][\\p{ID_Continue}$\\u{200C}\\u{200D}]*$/u;\n\n        return objectPath\n            .map((propName, index) =>\n                ECMAScript2018IdentifierNameRegExp.test(propName)\n                    ? index === 0\n                        ? propName\n                        : `.${propName}`\n                    : `[${util.inspect(propName)}]`,\n            )\n            .join('');\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n    private genGetObjectPath(nodes: NunjucksExtension.Nodes) {\n        type NunjucksPropertyKey =\n            | NunjucksNodes.Symbol['value']\n            | NunjucksNodes.LookupVal['val']['value'];\n        const getObjectPath = (\n            lookupValNode: NunjucksNodes.Symbol | NunjucksNodes.LookupVal,\n        ): NunjucksPropertyKey[] =>\n            lookupValNode instanceof nodes.LookupVal\n                ? [\n                      ...getObjectPath(lookupValNode.target),\n                      lookupValNode.val.value,\n                  ]\n                : [lookupValNode.value];\n        return getObjectPath;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n    private genValue2node(nodes: NunjucksExtension.Nodes) {\n        const value2node = (\n            value: unknown,\n            lineno: number,\n            colno: number,\n        ): NunjucksNodes.AllNodeType => {\n            if (Array.isArray(value)) {\n                return new nodes.Array(\n                    lineno,\n                    colno,\n                    value.map((v) => value2node(v, lineno, colno)),\n                );\n            } else if (isObject(value)) {\n                if (value instanceof nodes.Node) {\n                    return value as NunjucksNodes.AllNodeType;\n                }\n                return new nodes.Dict(\n                    lineno,\n                    colno,\n                    Object.entries(value).map(\n                        ([prop, value]) =>\n                            new nodes.Pair(\n                                lineno,\n                                colno,\n                                value2node(prop, lineno, colno),\n                                value2node(value, lineno, colno),\n                            ),\n                    ),\n                );\n            } else {\n                return new nodes.Literal(lineno, colno, value);\n            }\n        };\n        return value2node;\n    }\n}\n"]}