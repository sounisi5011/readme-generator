{"version":3,"file":"setProp.js","sourceRoot":"","sources":["../../src/template-tags/setProp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as nunjucks from 'nunjucks';\nimport * as NunjucksLib from 'nunjucks/src/lib';\n\nimport type { Extension as NunjucksExtension } from '../types/nunjucks-extension';\nimport type * as NunjucksNodes from '../types/nunjucks-extension/nunjucks/src/nodes';\nimport { isObject, propString, typeString } from '../utils';\n\ninterface ObjectPathItem {\n    prop: unknown;\n    lineno: number;\n    colno: number;\n}\n\ntype ObjectPathList = readonly ObjectPathItem[];\n\ninterface ArgType {\n    targetVariableList: ObjectPathList[];\n    value: unknown;\n}\n\nexport default class SetPropExtension implements NunjucksExtension {\n    public tags = ['setProp'];\n\n    public parse(\n        parser: NunjucksExtension.Parser,\n        nodes: NunjucksExtension.Nodes,\n        lexer: NunjucksExtension.Lexer,\n    ): NunjucksExtension.ParseResult {\n        const tagNameSymbolToken = parser.nextToken();\n        if (!tagNameSymbolToken)\n            this.throwError(\n                parser,\n                `expected ${this.tags.join(' or ')}, got end of file`,\n            );\n        const tagName = tagNameSymbolToken.value;\n\n        /**\n         * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L496-L503\n         */\n        const targetVarList: ObjectPathList[] = [];\n        while (true) {\n            let target;\n            try {\n                target = parser.parsePrimary();\n            } catch (error) {\n                if (!(error instanceof NunjucksLib.TemplateError)) throw error;\n                const errorMessageSuffix = /,\\s*got end of file$/.test(\n                    error.message,\n                )\n                    ? `got end of file`\n                    : `got no variable`;\n                this.throwError(\n                    parser,\n                    `expected one or more variable in ${tagName} tag, ${errorMessageSuffix}`,\n                    error,\n                );\n            }\n\n            if (\n                !(target instanceof nodes.LookupVal) &&\n                !(target instanceof nodes.Symbol)\n            )\n                this.throwError(\n                    parser,\n                    `expected variable name or variable reference in ${tagName} tag`,\n                    target.lineno,\n                    target.colno,\n                );\n\n            targetVarList.push(this.getObjectPath(nodes, target));\n\n            if (!parser.skip(lexer.TOKEN_COMMA)) break;\n        }\n\n        if (targetVarList.length < 1)\n            this.throwError(\n                parser,\n                `expected one or more variable in ${tagName} tag, got no variable`,\n                parser.tokens.lineno,\n                parser.tokens.colno,\n            );\n\n        /**\n         * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L505-L522\n         */\n        let valueNode;\n        let bodyNodeList;\n        if (parser.skipValue(lexer.TOKEN_OPERATOR, '=')) {\n            try {\n                valueNode = parser.parseExpression();\n            } catch (error) {\n                if (!(error instanceof NunjucksLib.TemplateError)) throw error;\n                if (/^unexpected token:/.test(error.message)) {\n                    this.throwError(\n                        parser,\n                        `expected expression in ${tagName} tag, got ${error.message}`,\n                        error,\n                    );\n                } else if (/,\\s*got end of file$/.test(error.message)) {\n                    this.throwError(\n                        parser,\n                        `expected expression in ${tagName} tag, got end of file`,\n                        error,\n                    );\n                }\n                throw error;\n            }\n            parser.advanceAfterBlockEnd(tagName);\n        } else {\n            const nextToken = parser.peekToken();\n\n            /**\n             * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L122-L130\n             */\n            if (!(nextToken && nextToken.type === lexer.TOKEN_BLOCK_END)) {\n                /**\n                 * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L1024-L1055\n                 */\n                const errData =\n                    nextToken && nextToken.type === lexer.TOKEN_SYMBOL\n                        ? {\n                              expected: '`,` or =',\n                              lineno: nextToken.lineno,\n                              colno: nextToken.colno,\n                          }\n                        : {\n                              expected: '= or block end',\n                              lineno: parser.tokens.lineno,\n                              colno: parser.tokens.colno,\n                          };\n                this.throwError(\n                    parser,\n                    `expected ${errData.expected} in ${tagName} tag`,\n                    errData.lineno,\n                    errData.colno,\n                );\n            }\n\n            parser.advanceAfterBlockEnd(tagName);\n            bodyNodeList = parser.parseUntilBlocks('endsetProp', 'endset');\n            try {\n                parser.advanceAfterBlockEnd();\n            } catch (error) {\n                if (error instanceof NunjucksLib.TemplateError) {\n                    if (error.message === 'unexpected end of file') {\n                        this.throwError(\n                            parser,\n                            `unexpected end of file. expected \"endsetProp\" or \"endset\" block after ${tagName} tag`,\n                            error,\n                        );\n                    }\n                }\n                throw error;\n            }\n        }\n\n        const arg: ArgType = {\n            targetVariableList: targetVarList,\n            value: valueNode,\n        };\n        const args = new nodes.NodeList(\n            targetVarList[0][0].lineno,\n            targetVarList[0][0].colno,\n        );\n        args.addChild(this.value2node(nodes, arg, args.lineno, args.colno));\n        const contentArgs = bodyNodeList ? [bodyNodeList] : [];\n        return new nodes.CallExtension(this, 'run', args, contentArgs);\n    }\n\n    public run(\n        context: NunjucksExtension.Context,\n        arg: ArgType,\n        body?: () => unknown,\n    ): nunjucks.runtime.SafeString {\n        for (const objectPathList of arg.targetVariableList) {\n            let obj: Record<string, unknown> | undefined;\n            objectPathList.forEach((objectPathItem, index) => {\n                const propName: any = objectPathItem.prop; // eslint-disable-line @typescript-eslint/no-explicit-any\n                const nextIndex = index + 1;\n                const nextObjectPathItem = objectPathList[nextIndex];\n\n                if (nextObjectPathItem) {\n                    const propValue = (obj || context.getVariables())[propName];\n                    if (!isObject(propValue)) {\n                        const objectPropNameList = objectPathList.map(\n                            ({ prop }) => prop,\n                        );\n                        const errorMessage =\n                            'setProp tag / Cannot be assigned to `' +\n                            this.toPropString(objectPropNameList) +\n                            '`! `' +\n                            this.toPropString(objectPropNameList, nextIndex) +\n                            '` variable value is ' +\n                            typeString(propValue) +\n                            ', not an object';\n                        throw new NunjucksLib.TemplateError(\n                            new TypeError(errorMessage),\n                            nextObjectPathItem.lineno,\n                            nextObjectPathItem.colno,\n                        );\n                    }\n                    obj = propValue;\n                } else {\n                    const value = body ? body() : arg.value;\n                    if (obj) {\n                        obj[propName] = value;\n                    } else {\n                        context.setVariable(propName, value);\n                    }\n                }\n            });\n        }\n        return new nunjucks.runtime.SafeString('');\n    }\n\n    private toPropString(objectPath: unknown[], stopIndex?: number): string {\n        return propString(objectPath.slice(0, stopIndex)).replace(/^\\./, '');\n    }\n\n    private throwError(\n        parser: NunjucksExtension.Parser,\n        message: string,\n        sourceError: NunjucksLib.TemplateError,\n    ): never;\n\n    private throwError(\n        parser: NunjucksExtension.Parser,\n        message: string,\n        lineno?: number,\n        colno?: number,\n    ): never;\n\n    private throwError(\n        parser: NunjucksExtension.Parser,\n        message: string,\n        linenoOrError?: number | NunjucksLib.TemplateError,\n        colno?: number,\n    ): never {\n        let lineno;\n        if (typeof linenoOrError === 'number') {\n            lineno = linenoOrError;\n        } else if (linenoOrError instanceof NunjucksLib.TemplateError) {\n            lineno = linenoOrError.lineno;\n            colno = linenoOrError.colno;\n            /**\n             * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L60-L62\n             */\n            if (typeof lineno === 'number') lineno -= 1;\n            /**\n             * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L63-L65\n             */\n            if (typeof colno === 'number') colno -= 1;\n        }\n\n        const errorMessage = `${this.constructor.name}#parse: ${message}`;\n        parser.fail(errorMessage, lineno, colno);\n    }\n\n    private getObjectPath(\n        nodes: NunjucksExtension.Nodes,\n        lookupValNode: NunjucksNodes.Symbol | NunjucksNodes.LookupVal,\n    ): ObjectPathItem[] {\n        if (lookupValNode instanceof nodes.LookupVal) {\n            const targetList =\n                lookupValNode.target instanceof nodes.Symbol ||\n                lookupValNode.target instanceof nodes.LookupVal\n                    ? this.getObjectPath(nodes, lookupValNode.target)\n                    : [];\n            return targetList.concat({\n                prop: lookupValNode.val,\n                lineno: lookupValNode.lineno + 1,\n                colno: lookupValNode.colno + 1,\n            });\n        } else {\n            return [\n                {\n                    prop: lookupValNode.value,\n                    lineno: lookupValNode.lineno + 1,\n                    colno: lookupValNode.colno + 1,\n                },\n            ];\n        }\n    }\n\n    private value2node(\n        nodes: NunjucksExtension.Nodes,\n        value: unknown,\n        lineno: number,\n        colno: number,\n    ): NunjucksNodes.AllNodeType {\n        if (value instanceof nodes.Node) {\n            return value;\n        } else if (Array.isArray(value)) {\n            return new nodes.Array(\n                lineno,\n                colno,\n                value.map((v) =>\n                    this.value2node(nodes, v, lineno, colno),\n                ) as NunjucksNodes.Array['children'],\n            );\n        } else if (isObject(value)) {\n            return new nodes.Dict(\n                lineno,\n                colno,\n                Object.entries(value).map(\n                    ([prop, value]) =>\n                        new nodes.Pair(\n                            lineno,\n                            colno,\n                            this.value2node(\n                                nodes,\n                                prop,\n                                lineno,\n                                colno,\n                            ) as NunjucksNodes.Literal,\n                            this.value2node(\n                                nodes,\n                                value,\n                                lineno,\n                                colno,\n                            ) as ReturnType<\n                                NunjucksExtension.Parser['parseExpression']\n                            >,\n                        ),\n                ),\n            );\n        } else {\n            return new nodes.Literal(lineno, colno, value);\n        }\n    }\n}\n"]}