{"version":3,"file":"setProp.js","sourceRoot":"","sources":["../../src/template-tags/setProp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as nunjucks from 'nunjucks';\nimport * as util from 'util';\n\nimport type { Extension as NunjucksExtension } from '../types/nunjucks-extension';\nimport type * as NunjucksNodes from '../types/nunjucks-extension/nunjucks/src/nodes';\nimport {\n    Array2ReadonlyArray,\n    isObject,\n    isValidIdentifierName as isValidPropName,\n} from '../utils';\n\ninterface TargetVariableData {\n    readonly objectPath: Array2ReadonlyArray<\n        ReturnType<ReturnType<SetPropExtension['genGetObjectPath']>>\n    >;\n    readonly lineno: number;\n    readonly colno: number;\n}\n\ninterface ArgType {\n    targetVariableList: TargetVariableData[];\n    value: unknown;\n}\n\nexport default class SetPropExtension implements NunjucksExtension {\n    public tags = ['setProp'];\n\n    #failMsgPrefix = `SetPropExtension#parse: `;\n\n    public parse(\n        parser: NunjucksExtension.Parser,\n        nodes: NunjucksExtension.Nodes,\n        lexer: NunjucksExtension.Lexer,\n    ): NunjucksExtension.ParseResult {\n        const getObjectPath = this.genGetObjectPath(nodes);\n        const value2node = this.genValue2node(nodes);\n\n        const tagNameSymbolToken = parser.nextToken();\n        if (!tagNameSymbolToken)\n            parser.fail(\n                `${this.#failMsgPrefix}expected ${this.tags.join(\n                    ' or ',\n                )}, got end of file`,\n            );\n        const tagName = tagNameSymbolToken.value;\n\n        /**\n         * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L496-L503\n         */\n        const targetVarList: TargetVariableData[] = [];\n        for (let target; (target = parser.parsePrimary()); ) {\n            if (\n                !(\n                    target instanceof nodes.LookupVal ||\n                    target instanceof nodes.Symbol\n                )\n            )\n                parser.fail(\n                    `${\n                        this.#failMsgPrefix\n                    }expected variable name or variable reference in ${tagName} tag`,\n                    target.lineno,\n                    target.colno,\n                );\n\n            targetVarList.push({\n                objectPath: getObjectPath(target),\n                lineno: target.lineno,\n                colno: target.colno,\n            });\n\n            if (!parser.skip(lexer.TOKEN_COMMA)) break;\n        }\n\n        if (targetVarList.length < 1)\n            parser.fail(\n                `${\n                    this.#failMsgPrefix\n                }expected one or more variable in ${tagName} tag, got no variable`,\n                parser.tokens.lineno,\n                parser.tokens.colno,\n            );\n\n        /**\n         * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L505-L522\n         */\n        let valueNode;\n        let bodyNodeList;\n        if (parser.skipValue(lexer.TOKEN_OPERATOR, '=')) {\n            valueNode = parser.parseExpression();\n            if (!valueNode)\n                parser.fail(\n                    `${\n                        this.#failMsgPrefix\n                    }expected expression in ${tagName} tag`,\n                    parser.tokens.lineno,\n                    parser.tokens.colno,\n                );\n            parser.advanceAfterBlockEnd(tagName);\n        } else {\n            try {\n                parser.advanceAfterBlockEnd(tagName);\n            } catch (error) {\n                if (\n                    error instanceof Error &&\n                    /** @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/lib.js#L68-L70 */\n                    error.name === 'Template render error' &&\n                    /** @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L129 */\n                    error.message ===\n                        `expected block end in ${tagName} statement`\n                ) {\n                    parser.fail(\n                        `${\n                            this.#failMsgPrefix\n                        }expected = or block end in ${tagName} tag`,\n                        tagNameSymbolToken.lineno,\n                        tagNameSymbolToken.colno,\n                    );\n                }\n                throw error;\n            }\n            bodyNodeList = parser.parseUntilBlocks('endsetProp', 'endset');\n            parser.advanceAfterBlockEnd();\n        }\n\n        const arg: ArgType = {\n            targetVariableList: targetVarList,\n            value: valueNode,\n        };\n        return new nodes.CallExtension(\n            this,\n            'run',\n            new nodes.NodeList(\n                targetVarList[0].lineno,\n                targetVarList[0].colno,\n                [\n                    value2node(\n                        arg,\n                        targetVarList[0].lineno,\n                        targetVarList[0].colno,\n                    ),\n                ],\n            ),\n            bodyNodeList ? [bodyNodeList] : [],\n        );\n    }\n\n    public run(\n        context: {\n            env: unknown;\n            ctx: Record<string, unknown>;\n            blocks: unknown;\n            exported: unknown;\n        },\n        arg: ArgType,\n        body?: () => unknown,\n    ): nunjucks.runtime.SafeString {\n        const value = body ? body() : arg.value;\n\n        for (const { objectPath } of arg.targetVariableList) {\n            let obj: Record<string, unknown> = context.ctx;\n            objectPath.map(String).forEach((propName, index, objectPath) => {\n                const isLast = objectPath.length - 1 === index;\n\n                if (isLast) {\n                    obj[propName] = value;\n                } else {\n                    const o = obj[propName];\n                    if (!isObject(o)) {\n                        throw new TypeError(\n                            'setProp tag / Cannot be assigned to `' +\n                                this.toPropString(objectPath) +\n                                '`! `' +\n                                this.toPropString(\n                                    objectPath.slice(0, index + 1),\n                                ) +\n                                '` variable value is ' +\n                                (o === null ? 'null' : typeof o) +\n                                ', not an object',\n                        );\n                    }\n                    obj = o;\n                }\n            });\n        }\n\n        return new nunjucks.runtime.SafeString('');\n    }\n\n    private toPropString(objectPath: string[]): string {\n        return objectPath\n            .map((propName, index) =>\n                isValidPropName(propName)\n                    ? index === 0\n                        ? propName\n                        : `.${propName}`\n                    : `[${util.inspect(propName)}]`,\n            )\n            .join('');\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n    private genGetObjectPath(nodes: NunjucksExtension.Nodes) {\n        type NunjucksPropertyKey =\n            | NunjucksNodes.Symbol['value']\n            | NunjucksNodes.LookupVal['val']['value'];\n        const getObjectPath = (\n            lookupValNode: NunjucksNodes.Symbol | NunjucksNodes.LookupVal,\n        ): NunjucksPropertyKey[] =>\n            lookupValNode instanceof nodes.LookupVal\n                ? [\n                      ...getObjectPath(lookupValNode.target),\n                      lookupValNode.val.value,\n                  ]\n                : [lookupValNode.value];\n        return getObjectPath;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n    private genValue2node(nodes: NunjucksExtension.Nodes) {\n        const value2node = (\n            value: unknown,\n            lineno: number,\n            colno: number,\n        ): NunjucksNodes.AllNodeType => {\n            if (Array.isArray(value)) {\n                return new nodes.Array(\n                    lineno,\n                    colno,\n                    value.map((v) => value2node(v, lineno, colno)),\n                );\n            } else if (isObject(value)) {\n                if (value instanceof nodes.Node) {\n                    return value as NunjucksNodes.AllNodeType;\n                }\n                return new nodes.Dict(\n                    lineno,\n                    colno,\n                    Object.entries(value).map(\n                        ([prop, value]) =>\n                            new nodes.Pair(\n                                lineno,\n                                colno,\n                                value2node(prop, lineno, colno),\n                                value2node(value, lineno, colno),\n                            ),\n                    ),\n                );\n            } else {\n                return new nodes.Literal(lineno, colno, value);\n            }\n        };\n        return value2node;\n    }\n}\n"]}