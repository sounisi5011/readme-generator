{"version":3,"file":"setProp.js","sourceRoot":"","sources":["../../src/template-tags/setProp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as NunjucksLib from 'nunjucks/src/lib';\nimport * as util from 'util';\n\nimport type { Extension as NunjucksExtension } from '../types/nunjucks-extension';\nimport type * as NunjucksNodes from '../types/nunjucks-extension/nunjucks/src/nodes';\nimport { isObject, lastItem, propString, typeString } from '../utils';\n\ntype TargetVariablesGroup =\n    | {\n        type: 'name';\n        variables: [NunjucksNodes.Symbol, ...NunjucksNodes.Symbol[]];\n    }\n    | {\n        type: 'ref';\n        variables: [NunjucksNodes.LookupVal, ...NunjucksNodes.LookupVal[]];\n    };\n\ninterface ObjectPathItem<TValue = unknown> {\n    value: TValue;\n    symbolName?: string;\n    lineno: number;\n    colno: number;\n}\n\ntype ObjectPathData<TValue = unknown> = ObjectPathItem<TValue>[];\n\ninterface ArgType {\n    targetPropList: ObjectPathData[];\n    value: unknown;\n}\n\nexport default class SetPropExtension implements NunjucksExtension {\n    public tags = ['setProp'];\n\n    public parse(\n        parser: NunjucksExtension.Parser,\n        nodes: NunjucksExtension.Nodes,\n        lexer: NunjucksExtension.Lexer,\n    ): NunjucksExtension.ParseResult {\n        const tagNameSymbolToken = parser.nextToken();\n        if (!tagNameSymbolToken) {\n            this.throwError(\n                parser,\n                this.parse,\n                `expected ${this.tags.join(' or ')}, got end of file`,\n            );\n        }\n        const tagName = tagNameSymbolToken.value;\n\n        /**\n         * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L496-L503\n         */\n        const targetVarsList: TargetVariablesGroup[] = [];\n        while (true) {\n            let target;\n            try {\n                target = parser.parsePrimary();\n            } catch (error) {\n                if (!(error instanceof NunjucksLib.TemplateError)) throw error;\n\n                /** @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L1064 */\n                const isExtraComma = /\\bunexpected token: ,(?=\\s|$)/.test(error.message);\n                /** @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L1064 */\n                const isVarsEnd = /\\bunexpected token: (?:=|%\\})(?=\\s|$)/.test(error.message);\n                /** @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L1023 */\n                const isEOF = /\\bgot end of file\\b/.test(error.message);\n\n                let errorMessage: string | undefined;\n                if (isExtraComma || ((isVarsEnd || isEOF) && targetVarsList.length > 0)) {\n                    errorMessage = `expected variable name or variable reference in ${tagName} tag`;\n                } else if (isEOF) {\n                    errorMessage = `expected one or more variable in ${tagName} tag, got end of file`;\n                } else if (isVarsEnd) {\n                    errorMessage = `expected one or more variable in ${tagName} tag, got no variable`;\n                } else if (/^unexpected token: \\S+$/.test(error.message)) {\n                    errorMessage =\n                        `expected variable name or variable reference in ${tagName} tag, got ${error.message}`;\n                }\n\n                if (!errorMessage) throw error;\n                this.throwError(parser, this.parse, errorMessage, error);\n            }\n\n            if (target instanceof nodes.Symbol) {\n                const lastTargetVars = lastItem(targetVarsList);\n                if (lastTargetVars && lastTargetVars.type === 'name') {\n                    lastTargetVars.variables.push(target);\n                } else {\n                    targetVarsList.push({\n                        type: 'name',\n                        variables: [target],\n                    });\n                }\n            } else if (target instanceof nodes.LookupVal) {\n                targetVarsList.push({\n                    type: 'ref',\n                    variables: [target],\n                });\n            } else {\n                this.throwError(\n                    parser,\n                    this.parse,\n                    `expected variable name or variable reference in ${tagName} tag`,\n                    target.lineno,\n                    target.colno,\n                );\n            }\n\n            if (!parser.skip(lexer.TOKEN_COMMA)) break;\n        }\n\n        if (targetVarsList.length < 1) {\n            this.throwError(\n                parser,\n                this.parse,\n                `expected one or more variable in ${tagName} tag, got no variable`,\n                parser.tokens.lineno,\n                parser.tokens.colno,\n            );\n        }\n\n        /**\n         * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L505-L522\n         */\n        let valueNode: ReturnType<typeof parser.parseExpression> | undefined;\n        let bodyNodeList: ReturnType<typeof parser.parseUntilBlocks> | undefined;\n        if (parser.skipValue(lexer.TOKEN_OPERATOR, '=')) {\n            try {\n                valueNode = parser.parseExpression();\n            } catch (error) {\n                if (!(error instanceof NunjucksLib.TemplateError)) throw error;\n                if (/^unexpected token:/.test(error.message)) {\n                    this.throwError(\n                        parser,\n                        this.parse,\n                        `expected expression in ${tagName} tag, got ${error.message}`,\n                        error,\n                    );\n                } else if (/,\\s*got end of file$/.test(error.message)) {\n                    this.throwError(\n                        parser,\n                        this.parse,\n                        `expected expression in ${tagName} tag, got end of file`,\n                        error,\n                    );\n                }\n                throw error;\n            }\n            parser.advanceAfterBlockEnd(tagName);\n        } else {\n            const nextToken = parser.peekToken();\n\n            /**\n             * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L122-L130\n             */\n            if (!(nextToken && nextToken.type === lexer.TOKEN_BLOCK_END)) {\n                /**\n                 * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L1024-L1055\n                 */\n                const errData = nextToken && nextToken.type === lexer.TOKEN_SYMBOL\n                    ? {\n                        expected: '`,` or =',\n                        lineno: nextToken.lineno,\n                        colno: nextToken.colno,\n                    }\n                    : {\n                        expected: '= or block end',\n                        lineno: parser.tokens.lineno,\n                        colno: parser.tokens.colno,\n                    };\n                this.throwError(\n                    parser,\n                    this.parse,\n                    `expected ${errData.expected} in ${tagName} tag`,\n                    errData.lineno,\n                    errData.colno,\n                );\n            }\n\n            parser.advanceAfterBlockEnd(tagName);\n            bodyNodeList = parser.parseUntilBlocks('endsetProp', 'endset');\n            try {\n                parser.advanceAfterBlockEnd();\n            } catch (error) {\n                if (error instanceof NunjucksLib.TemplateError) {\n                    if (error.message === 'unexpected end of file') {\n                        this.throwError(\n                            parser,\n                            this.parse,\n                            `unexpected end of file. expected \"endsetProp\" or \"endset\" block after ${tagName} tag`,\n                            error,\n                        );\n                    }\n                }\n                throw error;\n            }\n        }\n\n        const nodeList = new nodes.NodeList(tagNameSymbolToken.lineno, tagNameSymbolToken.colno);\n\n        for (const targetVars of targetVarsList) {\n            if (targetVars.type === 'name') {\n                /**\n                 * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L494-L522\n                 */\n                if (valueNode) {\n                    nodeList.addChild(\n                        new nodes.Set(\n                            tagNameSymbolToken.lineno,\n                            tagNameSymbolToken.colno,\n                            targetVars.variables,\n                            valueNode,\n                        ),\n                    );\n                } else if (bodyNodeList) {\n                    const setNode = new nodes.Set(\n                        tagNameSymbolToken.lineno,\n                        tagNameSymbolToken.colno,\n                        targetVars.variables,\n                    );\n                    /**\n                     * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L511-L515\n                     */\n                    setNode.body = new nodes.Capture(\n                        tagNameSymbolToken.lineno,\n                        tagNameSymbolToken.colno,\n                        bodyNodeList,\n                    );\n                    nodeList.addChild(setNode);\n                }\n            } else {\n                const targetPropList = targetVars.variables\n                    .map((lookupValNode) => this.getObjectPath(nodes, lookupValNode));\n                const arg: ArgType = {\n                    targetPropList,\n                    value: valueNode,\n                };\n                const args = new nodes.NodeList(\n                    tagNameSymbolToken.lineno,\n                    tagNameSymbolToken.colno,\n                );\n                args.addChild(this.value2node(\n                    nodes,\n                    arg,\n                    tagNameSymbolToken.lineno,\n                    tagNameSymbolToken.colno,\n                ));\n                const contentArgs = !valueNode && bodyNodeList ? [bodyNodeList] : [];\n                nodeList.addChild(\n                    new nodes.CallExtension(\n                        this,\n                        'runAssignProperties',\n                        args,\n                        contentArgs,\n                    ),\n                );\n            }\n            if (!(valueNode instanceof nodes.Symbol)) {\n                valueNode = targetVars.variables[0];\n                bodyNodeList = undefined;\n            }\n        }\n\n        return nodeList;\n    }\n\n    public runAssignProperties(_context: NunjucksExtension.Context, arg: ArgType, body?: () => unknown): string {\n        const value = body ? body() : arg.value;\n        for (const targetPropData of arg.targetPropList) {\n            let obj: Record<string, unknown> | undefined;\n            targetPropData.forEach((objectPathItem, index) => {\n                const propName: any = objectPathItem.value; // eslint-disable-line @typescript-eslint/no-explicit-any\n                const nextIndex = index + 1;\n                const nextObjectPathItem = targetPropData[nextIndex];\n\n                if (nextObjectPathItem) {\n                    const propValue = obj ? obj[propName] : objectPathItem.value;\n                    if (!isObject(propValue)) {\n                        const errorMessage = `setProp tag / Cannot be assigned to \\`${\n                            this.toPropString(targetPropData)\n                        }\\`! \\`${this.toPropString(targetPropData, nextIndex)}\\` variable value is ${\n                            typeString(propValue)\n                        }, not an object`;\n                        throw new NunjucksLib.TemplateError(\n                            new TypeError(errorMessage),\n                            nextObjectPathItem.lineno,\n                            nextObjectPathItem.colno,\n                        );\n                    }\n                    obj = propValue;\n                } else if (obj) {\n                    obj[propName] = value;\n                } else {\n                    throw new Error(\n                        this.getErrorMessage(\n                            this.runAssignProperties,\n                            `This line should never execute. If thrown this error, the source code is corrupted.`,\n                        ),\n                    );\n                }\n            });\n        }\n        return '';\n    }\n\n    private toPropString(objectPath: ObjectPathData, stopIndex?: number): string {\n        return (\n            (objectPath[0].symbolName\n                ?? `(${util.inspect(objectPath[0].value, { breakLength: Infinity })})`)\n            + propString(objectPath.slice(1, stopIndex).map(({ value }) => value))\n        );\n    }\n\n    private throwError(\n        parser: NunjucksExtension.Parser,\n        currentMethod: Function, // eslint-disable-line @typescript-eslint/ban-types\n        message: string,\n        sourceError: NunjucksLib.TemplateError,\n    ): never;\n\n    private throwError(\n        parser: NunjucksExtension.Parser,\n        currentMethod: Function, // eslint-disable-line @typescript-eslint/ban-types\n        message: string,\n        lineno?: number,\n        colno?: number,\n    ): never;\n\n    private throwError(\n        parser: NunjucksExtension.Parser,\n        currentMethod: Function, // eslint-disable-line @typescript-eslint/ban-types\n        message: string,\n        linenoOrError?: number | NunjucksLib.TemplateError,\n        colno?: number,\n    ): never {\n        let lineno;\n        if (typeof linenoOrError === 'number') {\n            lineno = linenoOrError;\n        } else if (linenoOrError instanceof NunjucksLib.TemplateError) {\n            lineno = linenoOrError.lineno;\n            colno = linenoOrError.colno;\n            /**\n             * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L60-L62\n             */\n            if (typeof lineno === 'number') lineno -= 1;\n            /**\n             * @see https://github.com/mozilla/nunjucks/blob/v3.2.1/nunjucks/src/parser.js#L63-L65\n             */\n            if (typeof colno === 'number') colno -= 1;\n        }\n\n        const errorMessage = this.getErrorMessage(currentMethod, message);\n        parser.fail(errorMessage, lineno, colno);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    private getErrorMessage(currentMethod: Function, message: string): string {\n        return `${this.constructor.name}#${currentMethod.name}: ${message}`;\n    }\n\n    private getObjectPath(\n        nodes: NunjucksExtension.Nodes,\n        lookupValNode: NunjucksNodes.LookupVal | NonNullable<NunjucksNodes.LookupVal['target']>,\n    ): ObjectPathData<\n        | NunjucksNodes.Symbol\n        | Exclude<NonNullable<NunjucksNodes.LookupVal['target']>, NunjucksNodes.LookupVal>\n        | NunjucksNodes.LookupVal['val']\n    > {\n        if (lookupValNode instanceof nodes.LookupVal) {\n            const targetList = lookupValNode.target ? this.getObjectPath(nodes, lookupValNode.target) : [];\n            return targetList.concat({\n                value: lookupValNode.val,\n                symbolName: lookupValNode.val instanceof nodes.Symbol ? lookupValNode.val.value : undefined,\n                lineno: lookupValNode.lineno + 1,\n                colno: lookupValNode.colno + 1,\n            });\n        } else {\n            return [{\n                value: lookupValNode,\n                symbolName: lookupValNode instanceof nodes.Symbol ? lookupValNode.value : undefined,\n                lineno: lookupValNode.lineno + 1,\n                colno: lookupValNode.colno + 1,\n            }];\n        }\n    }\n\n    private value2node(\n        nodes: NunjucksExtension.Nodes,\n        value: unknown,\n        lineno: number,\n        colno: number,\n    ): NunjucksNodes.AllNodeType {\n        if (value instanceof nodes.Node) {\n            return value;\n        } else if (Array.isArray(value)) {\n            return new nodes.Array(\n                lineno,\n                colno,\n                value.map((v) => this.value2node(nodes, v, lineno, colno)) as NunjucksNodes.Array['children'],\n            );\n        } else if (isObject(value)) {\n            return new nodes.Dict(\n                lineno,\n                colno,\n                Object.entries(value).map(([prop, value]) =>\n                    new nodes.Pair(\n                        lineno,\n                        colno,\n                        this.value2node(nodes, prop, lineno, colno) as NunjucksNodes.Literal,\n                        this.value2node(nodes, value, lineno, colno) as ReturnType<\n                            NunjucksExtension.Parser['parseExpression']\n                        >,\n                    )\n                ),\n            );\n        } else {\n            return new nodes.Literal(lineno, colno, value);\n        }\n    }\n}\n"]}