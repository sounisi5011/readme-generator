{"version":3,"file":"installed-dependencies.js","sourceRoot":"","sources":["../../src/utils/installed-dependencies.ts"],"names":[],"mappings":";;;AAAA,+BAA8C;AAE9C,wBAAuE;AAgBvE,SAAS,YAAY,CACjB,EACI,mBAAmB,EACnB,WAAW,GACC;IAEhB,MAAM,mBAAmB,GAAG,cAAW,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,CAAC;IAClF,MAAM,OAAO,GAAG,aAAU,CAAC,mBAAmB,CAAC,CAAC;IAEhD,IAAI,CAAC,WAAQ,CAAC,OAAO,CAAC,EAAE;QACpB,WAAW,CAAC,cAAW,CAAA,uBAAuB,kBAAe,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QACtF,OAAO,IAAI,CAAC;KACf;IAED,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC;IACjC,IAAI,CAAC,WAAQ,CAAC,YAAY,CAAC,EAAE;QACzB,WAAW,CACP,cAAW,CAAA,+BACP,kBAAe,CAAC,mBAAmB,CACvC,wEAAwE,CAC3E,CAAC;QACF,OAAO,IAAI,CAAC;KACf;IAED,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;SACpC,MAAM,CAAa,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,EAAE;QAC7C,IAAI,WAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,QAAQ,EAAE;YAC1D,IAAI,CAAC,OAAO,CAAC,GAAG;gBACZ,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,CAAC,EAAE,OAAO,CAAC,OAAO;aACrB,CAAC;SACL;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEX,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,SAAgB,aAAa,CACzB,EACI,mBAAmB,EACnB,WAAW,GACC;IAEhB,OAAO,YAAY,CAAC,EAAE,mBAAmB,EAAE,WAAW,EAAE,CAAC,CAAC;AAC9D,CAAC;AAPD,sCAOC","sourcesContent":["import { resolve as resolvePath } from 'path';\n\nimport { cwdRelativePath, errorMsgTag, isObject, tryRequire } from '.';\nimport type { ReportErrorFn } from '../main';\n\ninterface ParserOptions {\n    packageRootFullpath: string;\n    reportError: ReportErrorFn;\n}\n\ninterface DepsRecord {\n    [pkgName: string]: {\n        name: string;\n        version: string;\n        v: string;\n    };\n}\n\nfunction parseNpmLock(\n    {\n        packageRootFullpath,\n        reportError,\n    }: ParserOptions,\n): DepsRecord | null {\n    const pkgLockFileFullpath = resolvePath(packageRootFullpath, 'package-lock.json');\n    const pkgLock = tryRequire(pkgLockFileFullpath);\n\n    if (!isObject(pkgLock)) {\n        reportError(errorMsgTag`Failed to read file ${cwdRelativePath(pkgLockFileFullpath)}`);\n        return null;\n    }\n\n    const { dependencies } = pkgLock;\n    if (!isObject(dependencies)) {\n        reportError(\n            errorMsgTag`Failed to read npm lockfile ${\n                cwdRelativePath(pkgLockFileFullpath)\n            }. Reason: Invalid structure where 'dependencies' field does not exist.`,\n        );\n        return null;\n    }\n\n    const deps = Object.entries(dependencies)\n        .reduce<DepsRecord>((deps, [pkgName, pkgData]) => {\n            if (isObject(pkgData) && typeof pkgData.version === 'string') {\n                deps[pkgName] = {\n                    name: pkgName,\n                    version: pkgData.version,\n                    v: pkgData.version,\n                };\n            }\n            return deps;\n        }, {});\n\n    return deps;\n}\n\nexport function getDepsRecord(\n    {\n        packageRootFullpath,\n        reportError,\n    }: ParserOptions,\n): DepsRecord | null {\n    return parseNpmLock({ packageRootFullpath, reportError });\n}\n"]}