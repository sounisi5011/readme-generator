{"version":3,"file":"bent.js","sourceRoot":"","sources":["../../src/utils/bent.ts"],"names":[],"mappings":"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","sourcesContent":["import { inspect } from 'util';\n\nimport { indent, isObject } from '.';\n\nfunction setProp(obj: unknown, propName: PropertyKey, value: unknown, enumerable = true): void {\n    Object.defineProperty(obj, propName, {\n        configurable: true,\n        enumerable,\n        writable: true,\n        value,\n    });\n}\n\nfunction tryParseJSON(text: string, callback: (value: ReturnType<typeof JSON.parse>) => void): void {\n    try {\n        callback(JSON.parse(text));\n    } catch {\n        //\n    }\n}\n\nfunction isError(error: unknown, constructorName: string): error is Error & Record<PropertyKey, unknown> {\n    return error instanceof Error && error.constructor.name === constructorName;\n}\n\nfunction genErrerMessage(\n    { statusCode, headers, messageBodyStr }: {\n        statusCode: number;\n        headers: Record<PropertyKey, unknown>;\n        messageBodyStr: string;\n    },\n): string {\n    return [\n        `HTTP ${statusCode}`,\n        indent([\n            ...(\n                Object.entries(headers)\n                    .filter(([name]) => /^x-(?!(?:frame-options|content-type-options|xss-protection)$)/i.test(name))\n                    .sort(([a], [b]) => a < b ? -1 : a > b ? 1 : 0)\n                    .map(([name, value]) => `${name}: ${String(value)}`)\n            ),\n            `body:`,\n            indent(messageBodyStr),\n        ]),\n    ].join('\\n');\n}\n\nexport async function bentErrorFixer(error: unknown): Promise<never> {\n    if (\n        !(isError(error, 'StatusError')\n            && typeof error.statusCode === 'number' && typeof error.text === 'function' && isObject(error.headers))\n    ) {\n        // eslint-disable-next-line @typescript-eslint/return-await\n        return Promise.reject(error);\n    }\n\n    setProp(error, 'name', error.constructor.name, false);\n\n    let messageBodyStr = await error.text();\n    setProp(error, 'body', messageBodyStr);\n    delete error.text;\n\n    if (typeof error.arrayBuffer === 'function') delete error.arrayBuffer;\n    if (typeof error.json === 'function') {\n        tryParseJSON(messageBodyStr, value => {\n            Object.defineProperty(error, 'body', { value });\n            messageBodyStr = inspect(value);\n        });\n        delete error.json;\n    }\n\n    const { statusCode, headers } = error;\n    setProp(error, 'message', genErrerMessage({ statusCode, headers, messageBodyStr }), false);\n\n    return Promise.reject(error);\n}\n"]}