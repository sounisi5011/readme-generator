{"version":3,"file":"package-json.js","sourceRoot":"","sources":["../../src/utils/package-json.ts"],"names":[],"mappings":";;;;;;AAAA,+BAA8C;AAE9C,sEAA4C;AAE5C,wBAAgF;AAGhF,SAAgB,WAAW,CACvB,EACI,mBAAmB,EACnB,WAAW,GAId;IAED,MAAM,eAAe,GAAG,cAAW,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;IACzE,MAAM,GAAG,GAAG,aAAU,CAAC,eAAe,CAAC,CAAC;IACxC,IAAI,WAAQ,CAAC,GAAG,CAAC;QAAE,OAAO,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC;IAEnD,WAAW,CAAC,cAAW,CAAA,uBAAuB,kBAAe,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IAClF,OAAO,IAAI,CAAC;AAChB,CAAC;AAfD,kCAeC;AAED;;GAEG;AACH,SAAS,gBAAgB,CAAC,GAA4B;IAClD,IAAI,OAAO,GAAG,CAAC,UAAU,KAAK,QAAQ,EAAE;QACpC,OAAO,GAAG,CAAC,UAAU,CAAC;KACzB;IACD,IAAI,WAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,OAAO,GAAG,CAAC,UAAU,CAAC,GAAG,KAAK,QAAQ,EAAE;QACpE,OAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC;KAC7B;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,SAAgB,iBAAiB,CAC7B,EACI,eAAe,EACf,GAAG,EACH,WAAW,GAKd;IAED,IAAI,CAAC,UAAO,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,GAAG,CAAC,UAAU,KAAK,SAAS,EAAE;QAC7D,WAAW,CACP,cAAW,CAAA,4EACP,kBAAe,CAAC,eAAe,CACnC,QAAQ,CACX,CAAC;QACF,OAAO,IAAI,CAAC;KACf;IAED,MAAM,aAAa,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;IAC5C,MAAM,OAAO,GAAG,aAAa,IAAI,yBAAa,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACtE,IAAI,CAAC,OAAO,EAAE;QACV,WAAW,CACP,cAAW,CAAA,kFACP,kBAAe,CAAC,eAAe,CACnC,UAAU,GAAG,CAAC,UAAU,EAAE,CAC7B,CAAC;QACF,OAAO,IAAI,CAAC;KACf;IAED,OAAO,OAAO,CAAC;AACnB,CAAC;AAhCD,8CAgCC","sourcesContent":["import { resolve as resolvePath } from 'path';\n\nimport hostedGitInfo from 'hosted-git-info';\n\nimport { cwdRelativePath, errorMsgTag, hasProp, isObject, tryRequire } from '.';\nimport type { ReportErrorFn } from '../main';\n\nexport function readPkgJson(\n    {\n        packageRootFullpath,\n        reportError,\n    }: {\n        packageRootFullpath: string;\n        reportError: ReportErrorFn;\n    },\n): { pkgFileFullpath: string; pkg: Record<PropertyKey, unknown> } | null {\n    const pkgFileFullpath = resolvePath(packageRootFullpath, 'package.json');\n    const pkg = tryRequire(pkgFileFullpath);\n    if (isObject(pkg)) return { pkgFileFullpath, pkg };\n\n    reportError(errorMsgTag`Failed to read file ${cwdRelativePath(pkgFileFullpath)}`);\n    return null;\n}\n\n/**\n * @link https://docs.npmjs.com/cli/v6/configuring-npm/package-json#repository\n */\nfunction getRepositoryURL(pkg: { repository: unknown }): string | null {\n    if (typeof pkg.repository === 'string') {\n        return pkg.repository;\n    }\n    if (isObject(pkg.repository) && typeof pkg.repository.url === 'string') {\n        return pkg.repository.url;\n    }\n    return null;\n}\n\nexport function getRepositoryInfo(\n    {\n        pkgFileFullpath,\n        pkg,\n        reportError,\n    }: {\n        pkgFileFullpath: string;\n        pkg: { repository?: unknown };\n        reportError: ReportErrorFn;\n    },\n): hostedGitInfo | null {\n    if (!hasProp(pkg, 'repository') || pkg.repository === undefined) {\n        reportError(\n            errorMsgTag`Failed to detect remote repository. 'repository' field does not exist in ${\n                cwdRelativePath(pkgFileFullpath)\n            } file.`,\n        );\n        return null;\n    }\n\n    const repositoryURL = getRepositoryURL(pkg);\n    const gitInfo = repositoryURL && hostedGitInfo.fromUrl(repositoryURL);\n    if (!gitInfo) {\n        reportError(\n            errorMsgTag`Failed to detect remote repository. Unknown structure of 'repository' field in ${\n                cwdRelativePath(pkgFileFullpath)\n            } file: ${pkg.repository}`,\n        );\n        return null;\n    }\n\n    return gitInfo;\n}\n"]}