{"version":3,"file":"repository.js","sourceRoot":"","sources":["../../src/utils/repository.ts"],"names":[],"mappings":"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","sourcesContent":["import { inspect } from 'util';\n\nimport { revs as gitRevs } from '@npmcli/git';\nimport gitLinesToRevs from '@npmcli/git/lib/lines-to-revs';\nimport bent from 'bent';\nimport type GitHost from 'hosted-git-info';\n\nimport { indent, inspectValue, isObject, PromiseValue } from '.';\n\ntype Versions = PromiseValue<ReturnType<typeof gitRevs>>['versions'];\n\n/**\n * @see https://developer.github.com/v3/\n */\nconst githubApi = bent('https://api.github.com', {\n    /** @see https://developer.github.com/v3/#current-version */\n    'Accept': 'application/vnd.github.v3+json',\n    /** @see https://developer.github.com/v3/#user-agent-required */\n    'User-Agent': 'sounisi5011--readme-generator (https://github.com/sounisi5011/readme-generator)',\n});\n\n/**\n * Returns a list of tags in a remote repository with a syntax similar to the \"git ls-remote\" command\n */\nexport async function fetchTagsByApi(gitInfo: GitHost): Promise<string[]> {\n    if (gitInfo.type === 'github') {\n        /**\n         * @see https://developer.github.com/v3/git/refs/\n         * @see https://stackoverflow.com/a/18999865/4907315\n         * Note: Supposedly, GitHub's username and repository name are URL-Safe.\n         */\n        const stream = await githubApi(`/repos/${gitInfo.user}/${gitInfo.project}/git/refs/tags`)\n            .catch(async error => {\n                if (error.constructor.name === 'StatusError' && /^Incorrect statusCode: [0-9]+$/.test(error.message)) {\n                    Object.defineProperty(error, 'name', {\n                        configurable: true,\n                        enumerable: false,\n                        writable: true,\n                        value: error.constructor.name,\n                    });\n\n                    const errorBody = await error.text();\n                    error.body = errorBody;\n                    delete error.text;\n                    let messageBodyStr = errorBody;\n\n                    if (typeof error.arrayBuffer === 'function') delete error.arrayBuffer;\n                    if (typeof error.json === 'function') {\n                        try {\n                            error.body = JSON.parse(errorBody);\n                            messageBodyStr = inspect(error.body);\n                        } catch {\n                            //\n                        }\n                        delete error.json;\n                    }\n\n                    Object.defineProperty(error, 'message', {\n                        configurable: true,\n                        enumerable: false,\n                        writable: true,\n                        value: [\n                            `HTTP ${String(error.statusCode)}`,\n                            indent([\n                                ...(\n                                    Object.entries(error.headers).filter(([name]) =>\n                                        /^x-(?!(?:frame-options|content-type-options|xss-protection)$)/i.test(name)\n                                    ).sort(([a], [b]) => a < b ? -1 : a > b ? 1 : 0).map(([name, value]) =>\n                                        `${name}: ${String(value)}`\n                                    )\n                                ),\n                                `body:`,\n                                indent(messageBodyStr),\n                            ]),\n                        ].join('\\n'),\n                    });\n                }\n                throw error;\n            });\n        const data = await stream.json();\n        if (!Array.isArray(data)) {\n            throw new Error(`The GitHub API returned a invalid JSON value: ${inspectValue(data, { depth: 0 })}`);\n        }\n        return data.map((dataItem, index) => {\n            let errorMessage = `The GitHub API returned a invalid JSON value at index ${index}: ${\n                inspectValue(dataItem, { depth: 0 })\n            }`;\n            do {\n                if (!isObject(dataItem)) break;\n                const { ref, object } = dataItem;\n                if (!(typeof ref === 'string' && isObject(object))) break;\n                const { sha } = object;\n                if (!(typeof sha === 'string')) {\n                    errorMessage = `The GitHub API returned a invalid JSON value at property [${index}].object: ${\n                        inspectValue(object, { depth: 0 })\n                    }`;\n                    break;\n                }\n                return `${sha}  ${ref}`;\n            } while (false);\n            throw new Error(errorMessage);\n        });\n    } else if (gitInfo.type === 'gitlab') {\n        // TODO\n    } else if (gitInfo.type === 'bitbucket') {\n        // TODO\n    } else if (gitInfo.type === 'gist') {\n        // TODO\n    }\n    throw new Error(`The API to get tags of type \"${gitInfo.type}\" is not yet supported`);\n}\n\nexport async function fetchReleasedVersions(gitInfo: GitHost): Promise<Versions> {\n    try {\n        // Note: I tried this on a repository on GitHub.\n        //     Apparently, the REST API is faster to fetch than the \"git ls-remote\" command.\n        //     Therefore, this code first tries to get at the REST API.\n        return gitLinesToRevs(await fetchTagsByApi(gitInfo)).versions;\n    } catch (error) {\n        if (/^HTTP 404$/m.test(error.message)) throw error;\n\n        try {\n            return (await gitRevs(gitInfo.sshurl())).versions;\n        } catch (error) {\n            const { message, cmd, args, stderr, code } = error ?? {};\n\n            if (\n                typeof message === 'string'\n                && typeof cmd === 'string'\n                && Array.isArray(args)\n                && typeof stderr === 'string'\n                && typeof code === 'number'\n            ) {\n                error.message = [\n                    message,\n                    ``,\n                    indent([\n                        `$ ${cmd} ${args.join(' ')}`,\n                        ``,\n                        indent(stderr.replace(/[\\r\\n]+$/, ''), '> '),\n                        ``,\n                        `exited with error code: ${code}`,\n                    ]),\n                ].join('\\n');\n            }\n\n            throw error;\n        }\n    }\n}\n"]}