{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolve as resolvePath } from 'path';\n\nimport { spawn as gitSpawn } from '@npmcli/git';\nimport { getGitRoot } from 'get-roots';\nimport hostedGitInfo from 'hosted-git-info';\n\nimport { NunjucksFilterFn, renderNunjucksWithFrontmatter } from './renderer';\nimport { execCommand } from './template-filters/execCommand';\nimport { isOlderReleasedVersionGen } from './template-filters/isOlderReleasedVersion';\nimport { linesSelectedURL } from './template-filters/linesSelectedURL';\nimport { npmURL } from './template-filters/npmURL';\nimport { omitPackageScope } from './template-filters/omitPackageScope';\nimport { repoBrowseURLGen } from './template-filters/repoBrowseURL';\nimport { SetPropExtension } from './template-tags/setProp';\nimport {\n    cachedPromise,\n    catchError,\n    cwdRelativePath,\n    errorMsgTag,\n    hasProp,\n    indent,\n    isObject,\n    readFileAsync,\n    writeFileAsync,\n} from './utils';\nimport { createUnifiedDiffText } from './utils/diff';\nimport { getDepsRecord } from './utils/installed-dependencies';\nimport { ReleasedVersions } from './utils/repository';\n\nexport type ReportErrorFn = (message: string) => void;\ninterface CommitIshKeywordArguments {\n    committish?: string;\n    commit?: string;\n    branch?: string;\n    tag?: string;\n}\nexport type GetReleasedVersionsFn = () => Promise<ReleasedVersions | undefined>;\nexport type GetHeadCommitSha1Fn = () => Promise<string | null>;\n\nasync function tryReadFile(filepath: string): Promise<Buffer | undefined> {\n    return await readFileAsync(filepath).catch(() => undefined);\n}\n\nfunction tryRequire(filepath: string): unknown {\n    return catchError(() => require(resolvePath(filepath)));\n}\n\n// ----- //\n\nfunction readPkgJson(\n    {\n        packageRootFullpath,\n        reportError,\n    }: {\n        packageRootFullpath: string;\n        reportError: ReportErrorFn;\n    },\n): { pkgFileFullpath: string; pkg: Record<PropertyKey, unknown> } | null {\n    const pkgFileFullpath = resolvePath(packageRootFullpath, 'package.json');\n    const pkg = tryRequire(pkgFileFullpath);\n    if (isObject(pkg)) return { pkgFileFullpath, pkg };\n\n    reportError(errorMsgTag`Failed to read file ${cwdRelativePath(pkgFileFullpath)}`);\n    return null;\n}\n\n/**\n * @link https://docs.npmjs.com/cli/v6/configuring-npm/package-json#repository\n */\nfunction getRepositoryURL(pkg: { repository: unknown }): string | null {\n    if (typeof pkg.repository === 'string') {\n        return pkg.repository;\n    }\n    if (isObject(pkg.repository) && typeof pkg.repository.url === 'string') {\n        return pkg.repository.url;\n    }\n    return null;\n}\n\nfunction getRepositoryInfo(\n    {\n        pkgFileFullpath,\n        pkg,\n        reportError,\n    }: {\n        pkgFileFullpath: string;\n        pkg: { repository?: unknown };\n        reportError: ReportErrorFn;\n    },\n): hostedGitInfo | null {\n    if (!hasProp(pkg, 'repository') || pkg.repository === undefined) {\n        reportError(\n            errorMsgTag`Failed to detect remote repository. 'repository' field does not exist in ${\n                cwdRelativePath(pkgFileFullpath)\n            } file.`,\n        );\n        return null;\n    }\n\n    const repositoryURL = getRepositoryURL(pkg);\n    const gitInfo = repositoryURL && hostedGitInfo.fromUrl(repositoryURL);\n    if (!gitInfo) {\n        reportError(\n            errorMsgTag`Failed to detect remote repository. Unknown structure of 'repository' field in ${\n                cwdRelativePath(pkgFileFullpath)\n            } file: ${pkg.repository}`,\n        );\n        return null;\n    }\n\n    return gitInfo;\n}\n\nfunction getCommittish(kwargs: CommitIshKeywordArguments): string | undefined {\n    for (const prop of ['committish', 'commit', 'branch', 'tag'] as const) {\n        if (typeof kwargs[prop] === 'string' && kwargs[prop]) {\n            return kwargs[prop];\n        }\n    }\n    return undefined;\n}\nexport type GetCommittishFn = typeof getCommittish;\n\nfunction getRepositoryVars({ gitInfo }: { gitInfo: hostedGitInfo }): Record<string, unknown> {\n    return {\n        repo: {\n            user: gitInfo.user,\n            project: gitInfo.project,\n            shortcut(...args: [CommitIshKeywordArguments & { semver?: string }] | []) {\n                const kwargs = args.pop() ?? {};\n                const committish = getCommittish(kwargs) ?? (kwargs.semver ? `semver:${kwargs.semver}` : '');\n                return gitInfo.shortcut({ committish });\n            },\n        },\n    };\n}\n\nfunction getRepositoryFilters(\n    {\n        packageRootFullpath,\n        pkg,\n        templateFullpath,\n        gitInfo,\n        reportError,\n    }: {\n        packageRootFullpath: string;\n        pkg: Record<string, unknown>;\n        templateFullpath: string;\n        gitInfo: hostedGitInfo;\n        reportError: ReportErrorFn;\n    },\n): Record<string, NunjucksFilterFn> {\n    const version = typeof pkg.version === 'string' ? pkg.version : '';\n    const gitRootPath = catchError(() => getGitRoot(packageRootFullpath), packageRootFullpath);\n    const getReleasedVersions: GetReleasedVersionsFn = cachedPromise(async () =>\n        await ReleasedVersions.fetch(gitInfo)\n            .catch(error => {\n                if (error instanceof Error) {\n                    reportError(`Failed to fetch git tags for remote repository:\\n${indent(error.message)}`);\n                } else {\n                    reportError(errorMsgTag`Failed to fetch git tags for remote repository: ${error}`);\n                }\n                return undefined;\n            })\n    );\n    const getHeadCommitSha1: GetHeadCommitSha1Fn = cachedPromise(async () =>\n        await gitSpawn(['rev-parse', 'HEAD'])\n            .then(({ stdout }) => stdout.trim())\n            .catch(() => null)\n    );\n\n    return {\n        isOlderReleasedVersion: isOlderReleasedVersionGen({\n            getHeadCommitSha1,\n            getReleasedVersions,\n        }),\n        repoBrowseURL: repoBrowseURLGen({\n            templateFullpath,\n            gitRootPath,\n            getCommittish,\n            getHeadCommitSha1,\n            getReleasedVersions,\n            version,\n            gitInfo,\n        }),\n    };\n}\n\nfunction getRepositoryVarsAndFilters(\n    {\n        packageRootFullpath,\n        pkgFileFullpath,\n        pkg,\n        templateFullpath,\n        reportError,\n    }: {\n        packageRootFullpath: string;\n        pkgFileFullpath: string;\n        pkg: Record<string, unknown>;\n        templateFullpath: string;\n        reportError: ReportErrorFn;\n    },\n): { newTemplateContext: Record<string, unknown>; newFilters: Record<string, NunjucksFilterFn> } {\n    const gitInfo = getRepositoryInfo({\n        pkgFileFullpath,\n        pkg,\n        reportError,\n    });\n    if (!gitInfo) {\n        return {\n            newTemplateContext: {},\n            newFilters: {},\n        };\n    }\n\n    return {\n        newTemplateContext: getRepositoryVars({ gitInfo }),\n        newFilters: getRepositoryFilters({\n            packageRootFullpath,\n            pkg,\n            templateFullpath,\n            gitInfo,\n            reportError,\n        }),\n    };\n}\n\nasync function processTest(\n    {\n        templateFullpath,\n        generateFileFullpath,\n        generateText,\n    }: {\n        templateFullpath: string;\n        generateFileFullpath: string;\n        generateText: string;\n    },\n): Promise<void> {\n    const origReadmeContent = await tryReadFile(generateFileFullpath);\n    if (!origReadmeContent || origReadmeContent.equals(Buffer.from(generateText))) return;\n\n    const templateFilename = cwdRelativePath(templateFullpath);\n    const generateFilename = cwdRelativePath(generateFileFullpath);\n    const coloredDiffText = createUnifiedDiffText(\n        {\n            filename: generateFilename,\n            oldStr: origReadmeContent.toString('utf8'),\n            newStr: generateText,\n            indent: ' '.repeat(2),\n        },\n    );\n\n    throw new Error(\n        `Do not edit '${generateFilename}' manually! You MUST edit '${templateFilename}' instead of '${generateFilename}'`\n            + `\\n\\n${coloredDiffText}\\n`,\n    );\n}\n\nexport async function main(\n    {\n        template,\n        test,\n        reportError = console.error,\n    }: {\n        template: string;\n        test: true | undefined;\n        reportError?: ReportErrorFn;\n    },\n): Promise<void> {\n    const cwd = process.cwd();\n    const packageRootFullpath = cwd;\n    const templateFullpath = resolvePath(packageRootFullpath, template);\n    const destDirFullpath = packageRootFullpath;\n    const templateCodeWithFrontmatter = await readFileAsync(cwdRelativePath(templateFullpath), 'utf8');\n    const templateContext: Record<string, unknown> = {};\n    const nunjucksTags = [SetPropExtension];\n    const nunjucksFilters = {\n        omitPackageScope,\n        npmURL,\n        execCommand,\n        linesSelectedURL,\n    };\n\n    const pkgData = readPkgJson({ packageRootFullpath, reportError });\n    if (pkgData) {\n        const { pkgFileFullpath, pkg } = pkgData;\n        templateContext.pkg = pkg;\n\n        const { newTemplateContext, newFilters } = getRepositoryVarsAndFilters({\n            packageRootFullpath,\n            pkgFileFullpath,\n            pkg,\n            templateFullpath,\n            reportError,\n        });\n        Object.assign(templateContext, newTemplateContext);\n        Object.assign(nunjucksFilters, newFilters);\n    }\n\n    const deps = getDepsRecord({ packageRootFullpath, reportError });\n    if (deps) templateContext.deps = deps;\n\n    const generateFileFullpath = resolvePath(destDirFullpath, 'README.md');\n    const generateText = await renderNunjucksWithFrontmatter(\n        templateCodeWithFrontmatter,\n        templateContext,\n        {\n            cwd,\n            filters: nunjucksFilters,\n            extensions: nunjucksTags,\n        },\n    );\n\n    if (test) {\n        await processTest({\n            templateFullpath,\n            generateFileFullpath,\n            generateText,\n        });\n    } else {\n        await writeFileAsync(cwdRelativePath(generateFileFullpath), generateText);\n    }\n}\n"]}