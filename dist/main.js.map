{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolve as resolvePath } from 'path';\n\nimport { spawn as gitSpawn } from '@npmcli/git';\nimport { getGitRoot } from 'get-roots';\nimport matter from 'gray-matter';\nimport hostedGitInfo from 'hosted-git-info';\n\nimport { renderNunjucks } from './renderer';\nimport { execCommand } from './template-filters/execCommand';\nimport { isOlderReleasedVersionGen } from './template-filters/isOlderReleasedVersion';\nimport { linesSelectedURL } from './template-filters/linesSelectedURL';\nimport { npmURL } from './template-filters/npmURL';\nimport { omitPackageScope } from './template-filters/omitPackageScope';\nimport { repoBrowseURLGen } from './template-filters/repoBrowseURL';\nimport { SetPropExtension } from './template-tags/setProp';\nimport {\n    cachedPromise,\n    catchError,\n    cwdRelativePath,\n    errorMsgTag,\n    indent,\n    isObject,\n    readFileAsync,\n    writeFileAsync,\n} from './utils';\nimport { createUnifiedDiffText } from './utils/diff';\nimport { ReleasedVersions } from './utils/repository';\n\nasync function tryReadFile(filepath: string): Promise<Buffer | undefined> {\n    return await readFileAsync(filepath).catch(() => undefined);\n}\n\nfunction tryRequire(filepath: string): unknown {\n    return catchError(() => require(resolvePath(filepath)));\n}\n\n// ----- //\n\nconst cwd = process.cwd();\n\nconst nunjucksTags = [SetPropExtension];\n\nconst nunjucksFilters = {\n    omitPackageScope,\n    npmURL,\n    execCommand,\n    linesSelectedURL: linesSelectedURL,\n};\n\nexport async function main({ template, test }: { template: string; test: true | undefined }): Promise<void> {\n    const packageRootFullpath = cwd;\n    const templateFullpath = resolvePath(packageRootFullpath, template);\n    const destDirFullpath = packageRootFullpath;\n    const templateCodeWithFrontmatter = await readFileAsync(cwdRelativePath(templateFullpath), 'utf8');\n    const templateContext = {};\n\n    const pkgFileFullpath = resolvePath(packageRootFullpath, 'package.json');\n    const pkg = tryRequire(pkgFileFullpath);\n    if (!isObject(pkg)) {\n        console.error(errorMsgTag`Failed to read file ${cwdRelativePath(pkgFileFullpath)}`);\n    } else {\n        Object.assign(templateContext, { pkg });\n\n        const version = typeof pkg.version === 'string' ? pkg.version : '';\n        const repositoryURL = typeof pkg.repository === 'string'\n            ? pkg.repository\n            : isObject(pkg.repository) && typeof pkg.repository.url === 'string'\n            ? pkg.repository.url\n            : '';\n        const gitInfo = hostedGitInfo.fromUrl(repositoryURL);\n        if (!gitInfo) {\n            console.error(\n                `Failed to detect remote repository. `\n                    + (pkg.repository === undefined\n                        ? errorMsgTag`'repository' field does not exist in ${cwdRelativePath(pkgFileFullpath)} file.`\n                        : errorMsgTag`Unknown structure of 'repository' field in ${\n                            cwdRelativePath(pkgFileFullpath)\n                        } file: ${pkg.repository}`),\n            );\n        } else {\n            interface CommitIshKeywordArguments {\n                committish?: string;\n                commit?: string;\n                branch?: string;\n                tag?: string;\n            }\n            const getCommittish = (kwargs: CommitIshKeywordArguments): string | undefined => {\n                for (const prop of ['committish', 'commit', 'branch', 'tag'] as const) {\n                    if (typeof kwargs[prop] === 'string' && kwargs[prop]) {\n                        return kwargs[prop];\n                    }\n                }\n                return undefined;\n            };\n\n            const gitRootPath = catchError(() => getGitRoot(packageRootFullpath), packageRootFullpath);\n            const getReleasedVersions = cachedPromise(async () =>\n                await ReleasedVersions.fetch(gitInfo).catch(error => {\n                    console.error(`Failed to fetch git tags for remote repository:${\n                        error instanceof Error\n                            ? `\\n${indent(error.message)}`\n                            : errorMsgTag` ${error}`\n                    }`);\n                })\n            );\n            const getHeadCommitSha1 = cachedPromise(async () =>\n                await gitSpawn(['rev-parse', 'HEAD']).then(({ stdout }) => stdout.trim()).catch(() => null)\n            );\n            const isUseVersionBrowseURL = cachedPromise(async () => {\n                const headCommitSha1 = await getHeadCommitSha1();\n                if (!headCommitSha1) return false;\n\n                const releasedVersions = await getReleasedVersions();\n                if (!releasedVersions) return false;\n\n                const versionTag = releasedVersions.get(version);\n                if (!versionTag) return true;\n\n                return (await versionTag.fetchCommitSHA1()) === headCommitSha1;\n            });\n\n            Object.assign(templateContext, {\n                repo: {\n                    user: gitInfo.user,\n                    project: gitInfo.project,\n                    shortcut(...args: [CommitIshKeywordArguments & { semver?: string }] | []) {\n                        const kwargs = args.pop() ?? {};\n                        const committish = getCommittish(kwargs) ?? (kwargs.semver ? `semver:${kwargs.semver}` : '');\n                        return gitInfo.shortcut({ committish });\n                    },\n                },\n            });\n\n            Object.assign(nunjucksFilters, {\n                isOlderReleasedVersion: isOlderReleasedVersionGen({ getHeadCommitSha1, getReleasedVersions }),\n                repoBrowseURL: repoBrowseURLGen(\n                    { templateFullpath, gitRootPath, getCommittish, version, isUseVersionBrowseURL, gitInfo },\n                ),\n            });\n        }\n    }\n\n    const pkgLockFileFullpath = resolvePath(packageRootFullpath, 'package-lock.json');\n    const pkgLock = tryRequire(pkgLockFileFullpath);\n    if (!isObject(pkgLock)) {\n        console.error(errorMsgTag`Failed to read file ${cwdRelativePath(pkgLockFileFullpath)}`);\n    } else {\n        const { dependencies } = pkgLock;\n        if (!isObject(dependencies)) {\n            console.error(\n                errorMsgTag`Failed to read npm lockfile ${\n                    cwdRelativePath(pkgLockFileFullpath)\n                }. Reason: Invalid structure where 'dependencies' field does not exist.`,\n            );\n        } else {\n            interface DepsRecord {\n                [pkgName: string]: {\n                    name: string;\n                    version: string;\n                    v: string;\n                };\n            }\n            const deps = Object.entries(dependencies)\n                .reduce<DepsRecord>((deps, [pkgName, pkgData]) => {\n                    if (isObject(pkgData) && typeof pkgData.version === 'string') {\n                        deps[pkgName] = {\n                            name: pkgName,\n                            version: pkgData.version,\n                            v: pkgData.version,\n                        };\n                    }\n                    return deps;\n                }, {});\n            Object.assign(templateContext, { deps });\n        }\n    }\n\n    const generateFileFullpath = resolvePath(destDirFullpath, 'README.md');\n    const { content: templateCode, data: templateData } = matter(templateCodeWithFrontmatter);\n    const templateFrontmatter = templateCodeWithFrontmatter.substring(\n        0,\n        templateCodeWithFrontmatter.length - templateCode.length,\n    );\n    const dummyFrontmatter = templateFrontmatter.replace(/[^\\n]+/g, '');\n    const templateCodeWithDummyFrontmatter = dummyFrontmatter + templateCode;\n    Object.assign(templateContext, templateData);\n    const generateTextWithDummyFrontmatter = await renderNunjucks(\n        templateCodeWithDummyFrontmatter,\n        templateContext,\n        { cwd, filters: nunjucksFilters, extensions: nunjucksTags },\n    );\n    const generateText = generateTextWithDummyFrontmatter.substring(dummyFrontmatter.length);\n\n    if (test) {\n        const origReadmeContent = await tryReadFile(generateFileFullpath);\n        if (origReadmeContent && !origReadmeContent.equals(Buffer.from(generateText))) {\n            const templateFilename = cwdRelativePath(templateFullpath);\n            const generateFilename = cwdRelativePath(generateFileFullpath);\n            const coloredDiffText = createUnifiedDiffText(\n                {\n                    filename: generateFilename,\n                    oldStr: origReadmeContent.toString('utf8'),\n                    newStr: generateText,\n                    indent: ' '.repeat(2),\n                },\n            );\n            throw new Error(\n                `Do not edit '${generateFilename}' manually! You MUST edit '${templateFilename}' instead of '${generateFilename}'`\n                    + `\\n\\n${coloredDiffText}\\n`,\n            );\n        }\n    } else {\n        await writeFileAsync(cwdRelativePath(generateFileFullpath), generateText);\n    }\n}\n"]}