{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolve as resolvePath } from 'path';\n\nimport { spawn as gitSpawn } from '@npmcli/git';\nimport { getGitRoot } from 'get-roots';\nimport hostedGitInfo from 'hosted-git-info';\n\nimport { NunjucksFilterFn, renderNunjucksWithFrontmatter } from './renderer';\nimport { execCommand } from './template-filters/execCommand';\nimport { isOlderReleasedVersionGen } from './template-filters/isOlderReleasedVersion';\nimport { linesSelectedURL } from './template-filters/linesSelectedURL';\nimport { npmURL } from './template-filters/npmURL';\nimport { omitPackageScope } from './template-filters/omitPackageScope';\nimport { repoBrowseURLGen } from './template-filters/repoBrowseURL';\nimport { SetPropExtension } from './template-tags/setProp';\nimport {\n    cachedPromise,\n    catchError,\n    cwdRelativePath,\n    errorMsgTag,\n    indent,\n    isObject,\n    readFileAsync,\n    writeFileAsync,\n} from './utils';\nimport { createUnifiedDiffText } from './utils/diff';\nimport { getDepsRecord } from './utils/installed-dependencies';\nimport { ReleasedVersions } from './utils/repository';\n\nexport type ReportErrorFn = (message: string) => void;\n\nasync function tryReadFile(filepath: string): Promise<Buffer | undefined> {\n    return await readFileAsync(filepath).catch(() => undefined);\n}\n\nfunction tryRequire(filepath: string): unknown {\n    return catchError(() => require(resolvePath(filepath)));\n}\n\n// ----- //\n\nfunction parsePkgJson(\n    { packageRootFullpath, templateFullpath, reportError }: {\n        packageRootFullpath: string;\n        templateFullpath: string;\n        reportError: ReportErrorFn;\n    },\n): { newTemplateContext: Record<string, unknown>; newFilters: Record<string, NunjucksFilterFn> } {\n    const newTemplateContext = {};\n    const newFilters = {};\n\n    const pkgFileFullpath = resolvePath(packageRootFullpath, 'package.json');\n    const pkg = tryRequire(pkgFileFullpath);\n    if (!isObject(pkg)) {\n        reportError(errorMsgTag`Failed to read file ${cwdRelativePath(pkgFileFullpath)}`);\n        return { newTemplateContext, newFilters };\n    }\n    Object.assign(newTemplateContext, { pkg });\n\n    const version = typeof pkg.version === 'string' ? pkg.version : '';\n    const repositoryURL = typeof pkg.repository === 'string'\n        ? pkg.repository\n        : isObject(pkg.repository) && typeof pkg.repository.url === 'string'\n        ? pkg.repository.url\n        : '';\n    const gitInfo = hostedGitInfo.fromUrl(repositoryURL);\n    if (!gitInfo) {\n        reportError(\n            `Failed to detect remote repository. ` + (pkg.repository === undefined\n                ? errorMsgTag`'repository' field does not exist in ${cwdRelativePath(pkgFileFullpath)} file.`\n                : errorMsgTag`Unknown structure of 'repository' field in ${\n                    cwdRelativePath(pkgFileFullpath)\n                } file: ${pkg.repository}`),\n        );\n        return { newTemplateContext, newFilters };\n    }\n\n    interface CommitIshKeywordArguments {\n        committish?: string;\n        commit?: string;\n        branch?: string;\n        tag?: string;\n    }\n    const getCommittish = (kwargs: CommitIshKeywordArguments): string | undefined => {\n        for (const prop of ['committish', 'commit', 'branch', 'tag'] as const) {\n            if (typeof kwargs[prop] === 'string' && kwargs[prop]) {\n                return kwargs[prop];\n            }\n        }\n        return undefined;\n    };\n\n    const gitRootPath = catchError(() => getGitRoot(packageRootFullpath), packageRootFullpath);\n    const getReleasedVersions = cachedPromise(async () =>\n        await ReleasedVersions.fetch(gitInfo).catch(error =>\n            reportError(\n                `Failed to fetch git tags for remote repository:${\n                    error instanceof Error\n                        ? `\\n${indent(error.message)}`\n                        : errorMsgTag` ${error}`\n                }`,\n            )\n        )\n    );\n    const getHeadCommitSha1 = cachedPromise(async () =>\n        await gitSpawn(['rev-parse', 'HEAD']).then(({ stdout }) => stdout.trim()).catch(() => null)\n    );\n    const isUseVersionBrowseURL = cachedPromise(async () => {\n        const headCommitSha1 = await getHeadCommitSha1();\n        if (!headCommitSha1) return false;\n\n        const releasedVersions = await getReleasedVersions();\n        if (!releasedVersions) return false;\n\n        const versionTag = releasedVersions.get(version);\n        if (!versionTag) return true;\n\n        return (await versionTag.fetchCommitSHA1()) === headCommitSha1;\n    });\n\n    Object.assign(newTemplateContext, {\n        repo: {\n            user: gitInfo.user,\n            project: gitInfo.project,\n            shortcut(...args: [CommitIshKeywordArguments & { semver?: string }] | []) {\n                const kwargs = args.pop() ?? {};\n                const committish = getCommittish(kwargs) ?? (kwargs.semver ? `semver:${kwargs.semver}` : '');\n                return gitInfo.shortcut({ committish });\n            },\n        },\n    });\n\n    Object.assign(newFilters, {\n        isOlderReleasedVersion: isOlderReleasedVersionGen({ getHeadCommitSha1, getReleasedVersions }),\n        repoBrowseURL: repoBrowseURLGen(\n            { templateFullpath, gitRootPath, getCommittish, version, isUseVersionBrowseURL, gitInfo },\n        ),\n    });\n\n    return { newTemplateContext, newFilters };\n}\n\nasync function processTest(\n    { templateFullpath, generateFileFullpath, generateText }: {\n        templateFullpath: string;\n        generateFileFullpath: string;\n        generateText: string;\n    },\n): Promise<void> {\n    const origReadmeContent = await tryReadFile(generateFileFullpath);\n    if (!origReadmeContent || origReadmeContent.equals(Buffer.from(generateText))) return;\n\n    const templateFilename = cwdRelativePath(templateFullpath);\n    const generateFilename = cwdRelativePath(generateFileFullpath);\n    const coloredDiffText = createUnifiedDiffText(\n        {\n            filename: generateFilename,\n            oldStr: origReadmeContent.toString('utf8'),\n            newStr: generateText,\n            indent: ' '.repeat(2),\n        },\n    );\n\n    throw new Error(\n        `Do not edit '${generateFilename}' manually! You MUST edit '${templateFilename}' instead of '${generateFilename}'`\n            + `\\n\\n${coloredDiffText}\\n`,\n    );\n}\n\nexport async function main(\n    { template, test, reportError = console.error }: {\n        template: string;\n        test: true | undefined;\n        reportError?: ReportErrorFn;\n    },\n): Promise<void> {\n    const cwd = process.cwd();\n    const packageRootFullpath = cwd;\n    const templateFullpath = resolvePath(packageRootFullpath, template);\n    const destDirFullpath = packageRootFullpath;\n    const templateCodeWithFrontmatter = await readFileAsync(cwdRelativePath(templateFullpath), 'utf8');\n    const templateContext = {};\n    const nunjucksTags = [SetPropExtension];\n    const nunjucksFilters = {\n        omitPackageScope,\n        npmURL,\n        execCommand,\n        linesSelectedURL: linesSelectedURL,\n    };\n\n    const { newTemplateContext, newFilters } = parsePkgJson({ packageRootFullpath, templateFullpath, reportError });\n    Object.assign(templateContext, newTemplateContext);\n    Object.assign(nunjucksFilters, newFilters);\n\n    const deps = getDepsRecord({ packageRootFullpath, reportError });\n    if (deps) Object.assign(templateContext, { deps });\n\n    const generateFileFullpath = resolvePath(destDirFullpath, 'README.md');\n    const generateText = await renderNunjucksWithFrontmatter(\n        templateCodeWithFrontmatter,\n        templateContext,\n        { cwd, filters: nunjucksFilters, extensions: nunjucksTags },\n    );\n\n    if (test) {\n        await processTest({ templateFullpath, generateFileFullpath, generateText });\n    } else {\n        await writeFileAsync(cwdRelativePath(generateFileFullpath), generateText);\n    }\n}\n"]}